#!/bin/sh
#
#  Author: Vlad Seryakov vseryakov@gmail.com
#  Sep 2013
#
# chkconfig: 2345 70 70
# description: backendjs server
#

BKJS=bkjs
BKJS_MOD=backendjs

HOST=$(uname -n | awk -F. '{print $1}')
PLATFORM=$(uname -s)
case "$PLATFORM" in
  Linux)
    [ "$(grep CentOS /etc/issue)" != "" ] && OS_TYPE=centos
    [ "$(grep Amazon /etc/issue)" != "" ] && OS_TYPE=amazon
    # In multi-OS environment have to sync by OS type due to different dependencies in each distro
    [ "$PG_PREFIX" = "" ] && PG_PREFIX=$(find /usr -maxdepth 1 -name 'pgsql*' -type d -print|sort -r|head -1)
    [ -f /etc/sysconfig/$BKJS ] && . /etc/sysconfig/$BKJS
    KILLALL="killall -qr"
    ECHO="echo -e"
    SED="sed -i"
    ;;

  Darwin)
    OS_TYPE=macosx
    [ "$BKJS_HOME" = "" ] && export BKJS_HOME=~/.bkjs
    [ "$BKJS_PREFIX" = "" ] && export BKJS_PREFIX=/opt/local
    [ "$PG_PREFIX" = "" ] && export PG_PREFIX=$(find $BKJS_PREFIX/lib -maxdepth 1 -name 'postgresql*' -type d -print|sort -r|head -1) && PG_LIBDIR=$PG_PREFIX
    [ "$MYSQL_PREFIX" = "" ] && export MYSQL_PREFIX=$(find $BKJS_PREFIX/lib -maxdepth 1 -name 'mysql*' -type d -print|sort -r|head -1)
    KILLALL="killall -m"
    ECHO=echo
    SED="sed -i .orig"
    ;;

  *)
    echo "Unsupported platform"
    exit 1
    ;;
esac

# There are special commands that can be used as the script name
NAME=$(echo $0 | awk -F/ '{print $NF}')
case "$NAME" in
  bksh|sync-backend|check-backend|backup-backend)
    ARG=$NAME
    ;;

  *)
    ARG=$1;shift
    ;;
esac

# Global options
while [ $# -gt 1 ]; do
    case "$1" in
     -debug) export BKJS_DEBUG=$2;shift;shift;;
     -home) export BKJS_HOME=$2;shift;shift;;
     -prefix) export BKJS_PREFIX=$2;shift;shift;;
     -user) export BKJS_USER=$2;shift;shift;;
     -domain) export BKJS_DOMAIN=$2;shift;shift;;
     -host) export BKJS_HOST=$2;shift;shift;;
     -sync) export BKJS_SYNC=$2;shift;shift;;
     -path) export BKJS_PATH=$2;shift;shift;;
     -ssh) export BKJS_SSH_ARGS="$BKJS_SSH_ARGS $2";shift;shift;;
     -exclude) export BKJS_RSYNC_ARGS="$BKJS_RSYNC_ARGS --exclude $2";shift;shift;;
     -include) export BKJS_RSYNC_ARGS="$BKJS_RSYNC_ARGS --include $2";shift;shift;;
     -delete) export BKJS_RSYNC_ARGS="$BKJS_RSYNC_ARGS --delete-after";shift;;
     *) break;;
    esac
done

# Home must be specified for the script to work properly
[ "$BKJS_HOME" = "" ] && export BKJS_HOME=$(sh -c "echo ~$BKJS_USER")
[ -f $BKJS_HOME/etc/profile ] && . $BKJS_HOME/etc/profile

# Setup all variables with defaults
[ "$BKJS_USER" = "" ] && export BKJS_USER=$(whoami)
[ "$BKJS_PREFIX" = "" ] && export BKJS_PREFIX=/usr/local
[ "$BKJS_DOMAIN" = "" ] && export BKJS_DOMAIN=localhost
[ "$BKJS_BACKUP" = "" ] && export BKJS_BACKUP=$BKJS_HOME/backup
[ "$CASSANDRA_PREFIX" = "" ] && export CASSANDRA_PREFIX=$BKJS_PREFIX/cassandra
[ "$CASSANDRA_DIR" = "" ] && export CASSANDRA_DIR=$BKJS_HOME/cassandra
[ "$PG_PREFIX" = "" ] && export PG_PREFIX=/usr
[ "$PG_LIBDIR" = "" ] && export PG_LIBDIR=$PG_PREFIX/lib
[ "$PG_DIR" = "" ] && export PG_DIR=$BKJS_HOME/postgres
[ "$MYSQL_DIR" = "" ] && export MYSQL_DIR=$BKJS_HOME/mysql
[ "$MYSQL_PREFIX" = "" ] && export MYSQL_PREFIX=/usr
[ "$DYNAMODB_PREFIX" = "" ] && export DYNAMODB_PREFIX=$BKJS_PREFIX/dynamodb
[ "$ELASTICSEARCH_PREFIX" = "" ] && export ELASTICSEARCH_PREFIX=$BKJS_PREFIX/elasticsearch
[ "$MONGO_DIR" = "" ] && export MONGO_DIR=$BKJS_HOME/mongo
[ "$BKJS_IDLETIME" = "" ] && export BKJS_IDLETIME=900
[ "$BKJS_UPTIME" = "" ] && export BKJS_UPTIME=43200

# Setup paths
export PATH=$BKJS_HOME/bin:$BKJS_HOME/node_modules/.bin:$BKJS_PREFIX/bin:$PG_PREFIX/bin:$CASSANDRA_PREFIX/bin:/sbin:/usr/sbin:/usr/local/bin:/opt/local/bin:$PATH
export PKG_CONFIG_PATH=$BKJS_PREFIX/lib/pkgconfig:$PG_LIBDIR/pkgconfig:$PKG_CONFIG_PATH

# Locate binaries after all variables are set
[ "$NODE_BIN" = "" ] && export NODE_BIN=$(which node 2>/dev/null)
[ "$NODE_BIN" = "" ] && export NODE_BIN=$BKJS_PREFIX/bin/node
[ "$NPM_BIN" = "" ] && export NPM_BIN=$(which npm 2>/dev/null)
[ "$NPM_BIN" = "" ] && export NPM_BIN=$BKJS_PREFIX/bin/npm
[ "$BKJS_BIN" = "" ] && export BKJS_BIN=$(which bkjs 2>/dev/null)
[ "$BKJS_BIN" = "" ] && export BKJS_BIN=$BKJS_PREFIX/bin/$BK

case "$ARG" in
  start)
    # Perform setup and possibly get newest source code if sync master is configured
    ($0 sync-backend)

    echo "Starting $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME $BKJS_ARGS $@"
    $0 run-server
    ;;

  restart)
    $0 stop
    sleep 2
    $0 start
    ;;

  stop)
    $KILLALL $1 'backend:'
    $KILLALL $1 'backend:'
    exit 0
    ;;

  stop-web)
    $KILLALL $1 'backend: web'
    $KILLALL $1 'backend: web'
    exit 0
    ;;

  stop-server)
    $KILLALL $1 'backend: server'
    $KILLALL $1 'backend: server'
    exit 0
    ;;

  install)
    sudo $0 init-server -user $BKJS_USER -home $BKJS_HOME -prefix $BKJS_PREFIX
    sudo $0 init-devel
    $0 build-node
    npm install git+https://github.com/vseryakov/backendjs.git --backend_nanomsg --backend_imagemagick
    (cd bin && ln -sf ../node_modules/$BKJS_MOD/bkjs && ln -sf ../node_modules/$BKJS_MOD/bkjs bksh)
    chown -R $BKJS_USER $BKJS_HOME
    ;;

  install-ec2)
    $0 install -user ec2-user -prefix /home/ec2-user
    ;;

  stop-master)
    $KILLALL $1 'backend: master'
    $KILLALL $1 'backend: master'
    exit 0
    ;;

  init-server)
    echo "Installing in $BKJS_HOME for $BKJS_USER with prefix $BKJS_PREFIX ..."
    # Install required packages and utilities
    ($0 init-packages)

    ($0 init-hostname)
    ($0 init-ssh)
    ($0 init-user)
    ($0 init-system)
    ($0 init-logrotate)
    ($0 init-rsyslog)
    ($0 init-home)

    # Create global profile
    echo "BKJS_HOME=$BKJS_HOME" > /etc/sysconfig/$BKJS
    ;;

  init-hostname)
    # Set hostname with name and domain
    [ "$BKJS_HOST" = "" ] && exit
    hostname $BKJS_HOST.$BKJS_DOMAIN
    echo $BKJS_HOST.$BKJS_DOMAIN > /etc/hostname
    if [ -f /etc/sysconfig/network ]; then
       echo "HOSTNAME=$BKJS_HOST.$BKJS_DOMAIN" > /tmp/network
       grep -v HOSTNAME /etc/sysconfig/network >> /tmp/network
       mv /tmp/network /etc/sysconfig/network
    fi
    ;;

  init-user)
    # Add local user
    LHOME=/home/$BKJS_USER
    if [ "$(grep $BKJS_USER /etc/passwd)" = "" ]; then
       useradd -g 0 -m $BKJS_USER
       echo "$BKJS_USER ALL = NOPASSWD: ALL" > /etc/sudoers.d/$BKJS
       mkdir -p -m 700 $LHOME/.ssh && chown $BKJS_USER $LHOME/.ssh
       # Copy ssh config if running on Amazon instance
       [ -d /home/ec2-user -a "$BKJS_USER" != "ec2-user" ] && cp /home/ec2-user/.ssh/authorized_keys $LHOME/.ssh && chown $BKJS_USER $LHOME/.ssh/*
    fi

    # Allow path in sudo
    if [ ! -f /etc/sudoers.d/$BKJS ]; then
       echo "Defaults secure_path = /sbin:/bin:/usr/sbin:/usr/bin:$BKJS_PREFIX/bin:$LHOME/bin:$LHOME/node_modules/.bin" >> /etc/sudoers.d/$BKJS
    fi

    # Aliases and environment
    if [ "$(grep '#Bkjs' $LHOME/.bashrc)" = "" ]; then
       echo '#Bkjs' >> $LHOME/.bashrc
       echo "umask 022" >> $LHOME/.bashrc
       echo "export PATH=\$PATH:$LHOME/bin:$LHOME/node_modules/.bin" >> $LHOME/.bashrc
       echo 'alias slog="tail -100 /var/log/messages"' >> $LHOME/.bashrc
       echo "alias blog=\"tail -100 $BKJS_HOME/log/message.log\"" >> $LHOME/.bashrc
       echo "alias elog=\"tail -100 $BKJS_HOME/log/error.log\"" >> $LHOME/.bashrc
       echo "alias alog=\"tail -100 $BKJS_HOME/log/access.log\"" >> $LHOME/.bashrc
       echo 'alias ps="ps augx"' >> $LHOME/.bashrc
       echo 'alias mc="mc -b"' >> $LHOME/.bashrc
       echo 'alias df="df -h"' >> $LHOME/.bashrc
       echo 'bcp() { socat readline,history=~/.socat tcp4:localhost:208${1-0}; }' >> $LHOME/.bashrc
    fi
    ;;

  init-home)
    # Create required directories
    mkdir -p $BKJS_HOME/node_modules $BKJS_HOME/bin $BKJS_HOME/log $BKJS_HOME/etc $BKJS_HOME/var
    chown -R $BKJS_USER $BKJS_HOME
    ;;

  init-ssh)
    # Allow only pubkey auth
    if [ "$(grep '#Bkjs' /etc/ssh/sshd_config)" = "" ]; then
       echo "Configuring ssh..."
       egrep -v '^(#Bkjs|PasswordAuth|GSSAPIAuth|MaxAuth|MaxSess|ClientAlive)' /etc/ssh/sshd_config > /tmp/sshd_config
       echo "" >> /tmp/sshd_config
       echo "#Bkjs config" >> /tmp/sshd_config
       echo "PasswordAuthentication no" >> /tmp/sshd_config
       echo "GSSAPIAuthentication no" >> /tmp/sshd_config
       echo "MaxAuthTries 5" >> /tmp/sshd_config
       echo "MaxSessions 10" >> /tmp/sshd_config
       echo "ClientAliveInterval 15" >> /tmp/sshd_config
       echo "ClientAliveCountMax 5" >> /tmp/sshd_config
       mv /tmp/sshd_config /etc/ssh
       service sshd restart
    fi
    ;;

  init-logrotate)
    # Setup logrotate for backend log files
    if [ "$(grep '#Bkjs' /etc/logrotate.d/syslog)" = "" ]; then
       echo "Configuring logrotate..."
       echo "#Bkjs" > /etc/logrotate.d/syslog
       echo "/var/log/cron /var/log/messages {" >> /etc/logrotate.d/syslog
       echo " missingok" >> /etc/logrotate.d/syslog
       echo " daily" >> /etc/logrotate.d/syslog
       echo " sharedscripts" >> /etc/logrotate.d/syslog
       echo " postrotate" >> /etc/logrotate.d/syslog
       echo "  /usr/bin/killall -q -HUP rsyslogd" >> /etc/logrotate.d/syslog
       echo " endscript" >> /etc/logrotate.d/syslog
       echo "}" >> /etc/logrotate.d/syslog
    fi
    if [ ! -f /etc/logrotate.d/$BKJS -o "$(grep '#Bkjs $BKJS_HOME' /etc/logrotate.d/$BKJS)" = "" ]; then
       echo "#Bkjs $BKJS_HOME" > /etc/logrotate.d/$BKJS
       echo "$BKJS_HOME/log/message.log $BKJS_HOME/log/access.log {" >> /etc/logrotate.d/$BKJS
       echo " missingok" >> /etc/logrotate.d/$BKJS
       echo " daily" >> /etc/logrotate.d/$BKJS
       echo " sharedscripts" >> /etc/logrotate.d/$BKJS
       echo " postrotate" >> /etc/logrotate.d/$BKJS
       echo "  /usr/bin/killall -q -HUP rsyslogd" >> /etc/logrotate.d/$BKJS
       echo " endscript" >> /etc/logrotate.d/$BKJS
       echo "}" >> /etc/logrotate.d/$BKJS
    fi
    ;;

  init-rsyslog)
    # Setup syslog config for backend logging
    if [ "$(grep '#Bkjs' /etc/rsyslog.conf)" = "" ]; then
       echo "Configuring rsyslog..."
       echo "#Bkjs" > /etc/rsyslog.conf
       echo '$ModLoad imklog' >> /etc/rsyslog.conf
       echo '$ModLoad imuxsock' >> /etc/rsyslog.conf
       echo '$SystemLogRateLimitInterval 1' >> /etc/rsyslog.conf
       echo '$SystemLogRateLimitInterval 1' >> /etc/rsyslog.conf
       echo '$SystemLogRateLimitBurst 10000' >> /etc/rsyslog.conf
       echo '$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat' >> /etc/rsyslog.conf
       echo '$IncludeConfig /etc/rsyslog.d/*.conf' >> /etc/rsyslog.conf
       echo 'kern.*,*.emerg /dev/console' >> /etc/rsyslog.conf
       echo '*.info;cron.none,local0.none,local5.none /var/log/messages' >> /etc/rsyslog.conf
       echo 'cron.* /var/log/cron' >> /etc/rsyslog.conf
       echo 'local7.* /var/log/boot.log' >> /etc/rsyslog.conf
       rm -rf /var/log/maillog* /var/log/secure* /var/log/spooler*
       service rsyslog restart
       touch /var/log/messages
       chown -R $BKJS_USER /var/log/messages
    fi
    if [ ! -f /etc/rsyslog.d/$BKJS -o "$(grep '#Bkjs $BKJS_HOME' /etc/rsyslog.d/$BKJS)" = "" ]; then
       echo "#Bkjs $BKJS_HOME" > /etc/rsyslog.d/$BKJS
       echo "local0.* $BKJS_HOME/log/message.log" >> /etc/rsyslog.d/$BKJS
       echo "local5.* $BKJS_HOME/log/access.log" >> /etc/rsyslog.d/$BKJS
       mkdir -p $BKJS_HOME/log
       service rsyslog restart
       touch $BKJS_HOME/log/access.log $BKJS_HOME/log/message.log
       chown -R $BKJS_USER $BKJS_HOME/log
    fi
    ;;

  init-system)
    # Disable firewall and SELinux
    if [ -f /etc/selinux/config ]; then
        sed -i 's/SELINUX=(enforcing|permissive)/SELINUX=disabled/' /etc/selinux/config
    fi
    chkconfig iptables off
    service iptables stop

    # Allow sudo use local binaries
    sed -i 's/requiretty/!requiretty/' /etc/sudoers

    # File handles and coredumps for debugging
    if [ ! -f /etc/security/limits.d/99-$BKJS.conf ]; then
       $ECHO '* soft core unlimited' > /etc/security/limits.d/90-$BKJS.conf
       $ECHO '* hard core unlimited' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO '* soft nofile 512000' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO '* hard nofile 512000' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO 'root soft nofile 512000' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO 'root hard nofile 512000' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO '* soft memlock unlimited' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO '* hard memlock unlimited' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO 'root soft memlock unlimited' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO 'root hard memlock unlimited' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO '* soft as unlimited' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO '* hard as unlimited' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO 'root soft as unlimited' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO 'root hard as unlimited' >> /etc/security/limits.d/90-$BKJS.conf
    fi

    # System tuning
    if [ "$(grep '#Bkjs' /etc/sysctl.conf)" = "" ]; then
       echo "#Bkjs" >> /etc/sysctl.conf
       echo 'kernel.core_uses_pid=0' >> /etc/sysctl.conf
       echo 'vm.max_map_count=131072' >> /etc/sysctl.conf
       echo 'vm.min_free_kbytes=65536' >> /etc/sysctl.conf
       echo 'net.core.somaxconn=16384' >> /etc/sysctl.conf
       echo 'net.core.netdev_max_backlog=16384' >> /etc/sysctl.conf
       echo 'net.core.rmem_max=8388608' >> /etc/sysctl.conf
       echo 'net.core.wmem_max=8388608' >> /etc/sysctl.conf
       echo 'net.ipv4.ip_local_port_range=1024 65000' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_tw_reuse=1' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_tw_recycle=1' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_fin_timeout=15' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_keepalive_intvl=15' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_slow_start_after_idle=0' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_max_orphans=262144' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_max_syn_backlog=16384' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_max_tw_buckets=400000' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_no_metrics_save=1' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_syn_retries=2' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_synack_retries=2' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_rmem=8192 256000 8388608' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_wmem=4096 256000 8388608' >> /etc/sysctl.conf
       sysctl -p /etc/sysctl.conf
    fi
    ;;

  init-postfix)
    # Setup postfix with origin domain name
    if [ ! -f /etc/postfix/main.cf -o "$(grep '#Bkjs' /etc/postfix/main.cf)" = "" ]; then
       yum -y -q remove sendmail
       yum -y -q install postfix
       echo "Configuring postfix..."
       echo '#Bkjs' > /tmp/main.cf
       echo 'myorigin = $mydomain' >> /tmp/main.cf
       egrep -v '^(#Bkjs|myorigin)' /etc/postfix/main.cf >> /tmp/main.cf
       mv /tmp/main.cf /etc/postfix
       chkconfig postfix on
       postfix start
    fi
    ;;

  init-dns)
    # DNS cache
    if [ ! -f /etc/dnsmasq.conf -o "$(grep '#Bkjs' /etc/dnsmasq.conf)" = "" ]; then
       yum -y -q install dnsmasq
       echo "#Bkjs" > /etc/dnsmasq.conf
       echo "domain-needed" >> /etc/dnsmasq.conf
       echo "bogus-priv" >> /etc/dnsmasq.conf
       echo "no-resolv" >> /etc/dnsmasq.conf
       echo "no-poll" >> /etc/dnsmasq.conf
       grep nameserver /etc/resolv.conf |grep -v 127|sed 's/nameserver /server=/' >> /etc/dnsmasq.conf
       echo "server=8.8.8.8" >> /etc/dnsmasq.conf
       echo "server=8.8.4.4" >> /etc/dnsmasq.conf
       echo "listen-address=127.0.0.1" >> /etc/dnsmasq.conf
       echo "no-dhcp-interface=" >> /etc/dnsmasq.conf
       echo "nameserver 127.0.0.1" > /etc/resolv.conf
       echo "search $BKJS_DNS" >> /etc/resolv.conf
       chkconfig dnsmasq on
       service dnsmasq restart
    fi
    ;;

  init-instance)
    # Instance mode, duplicate messages to the console for easier access
    echo '*.info /dev/console' > /etc/rsyslog.d/console.conf
    truncate -c -s 0 /var/log/messages $BKJS_HOME/log/message.log $BKJS_HOME/log/error.log
    service rsyslog restart
    # Support for shutdown as normal user for instances
    chmod u+s /sbin/reboot
    # Make sure instances are not running indefinitely
    ln -sf $BKJS_BIN /etc/cron.hourly/check-backend
    ;;

  init-service)
    ln -sf $BKJS_BIN /etc/init.d/$BKJS
    chkconfig $BKJS on
    ;;

  init-sync)
    echo 'MAILTO=""' > /etc/cron.d/$BKJS
    echo "*/15 * * * * $BKJS_USER $BKJS_BIN sync-backend" >> /etc/cron.d/$BKJS
    ;;

  init-packages)
    # Install required runtime packages
    yum -y -q update
    yum -y -q install ntp rsync wget socat mc nano man telnet

    # Linux distro specific actions
    case "$OS_TYPE" in
      centos)
         if [ ! -f /etc/yum.repos.d/pgdg-93-centos.repo ]; then
            echo "Setting up PostgreSQL repo..."
            rpm -i http://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/pgdg-centos93-9.3-1.noarch.rpm
         fi
         yum -y -q install postgresql93-server
         ;;

      amazon)
         yum-config-manager --enable epel
         yum -y -q install postgresql9-server
         ;;
    esac
    ;;

  init-devel)
    # Install development packages for compiling node and modules
    yum -y -q install git svn gdb gcc-c++ make cmake autoconf automake libtool
    yum -y -q install libuuid-devel openssl-devel libxml2-devel openldap-devel readline-devel libpng-devel libjpeg-turbo-devel
    yum -y -q install mysql-devel

    # Linux distro specific actions
    case "$OS_TYPE" in
      centos)
         yum -y -q install postgresql93-devel
         ;;

      amazon)
         yum -y -q install postgresql9-devel
         yum remove gyp
         ;;
    esac
    ;;

  run-backend|run-server|run-shell|run|backendjs|bksh)
    [ -f /usr/lib/node_modules/$BKJS_MOD/server.js ] && SCRIPT=/usr/lib/node_modules/$BKJS_MOD/server.js
    [ -f $BKJS_PREFIX/lib/node_modules/$BKJS_MOD/server.js ] && SCRIPT=$BKJS_PREFIX/lib/node_modules/$BKJS_MOD/server.js
    [ -f $BKJS_HOME/node_modules/$BKJS_MOD/server.js ] && SCRIPT=$BKJS_HOME/node_modules/$BKJS_MOD/server.js
    [ -f node_modules/$BKJS_MOD/server.js ] && SCRIPT=node_modules/$BKJS_MOD/server.js
    [ -f server.js ] && SCRIPT=server.js
    [ -f $BKJS_HOME/app.js ] && SCRIPT=$BKJS_HOME/app.js
    [ -f app.js ] && SCRIPT=app.js
    [ -z $SCRIPT ] && echo "ERROR: Cannot find $BKJS module or app.js" && exit 1

    case "$ARG" in
     run-server)
        $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME -daemon -monitor -master -syslog $BKJS_ARGS $@
        ;;

     run-backend)
        $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME -debug -master -watch `pwd` $@
        ;;

     run-shell|bksh)
        $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME -shell -log log $@
        ;;

     *)
        $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME -master $@
        ;;
    esac
    ;;

  sync-backend)
    # Sync code from the master, only inside backend home, must be explicitely configured
    [ "$BKJS_SYNC" = "" ] && exit
    cd $BKJS_HOME
    log=/dev/null
    name=$($NODE_BIN -e "try{console.log(JSON.parse(require('fs').readFileSync('package.json')).name)}catch(e){}")
    network=$(ip -4 -o addr show eth0|awk '{split($4,a,".");printf "%s.%s\n",a[1],a[2]}')
    subnet=$(ip -4 -o addr show eth0|awk '{split($4,a,".");printf "%s.%s.%s\n",a[1],a[2],a[3]}')
    version=$($NODE_BIN -e "try{console.log(JSON.parse(require('fs').readFileSync('package.json')).version)}catch(e){}")
    update=$(echo $version|awk '{split($0,a,".");printf "%s.%s\n",a[1],a[2]}')
    name=${name-app}/${update-0.0}
    dirs=$BKJS_SYNC:sync/$name/
    [ "$network" != "" ] && dirs="$dirs $BKJS_SYNC:sync/$name-$network/"
    [ "$subnet" != "" ] && dirs="$dirs $BKJS_SYNC:sync/$name-$subnet/"
    [ "$BKJS_DEBUG" != "" ] && log=/dev/tty
    rsync -aqFF $BKJS_DEBUG -e "ssh -l $BKJS_USER -y -o StrictHostKeyChecking=no -o ConnectTimeout=5 $BKJS_SSH_ARGS" $dirs $BKJS_HOME 2>$log
    # Check for version change and run the restart command
    nversion=$($NODE_BIN -e "try{console.log(JSON.parse(require('fs').readFileSync('package.json')).version)}catch(e){}")
    [ "$BKJS_DEBUG" != "" ] && echo "old version: $version, new version: $nversion"
    [ "$nversion" != "" -a "$version" != "$nversion" ] && npm restart
    ;;

  put-backend)
    # Put backend code to the remote site
    if [ "$BKJS_PATH" = "" ]; then
       mod=$(node -e 'console.log(JSON.parse(require("fs").readFileSync("package.json")).name)')
       [ "$mod" = "$BKJS" ] && BKJS_PATH=node_modules/$BKJS_MOD
    fi
    [ "$BKJS_HOST" = "" ] && echo "Remote host required, specify with -host or BKJS_HOST" && exit
    for f in bin etc build deps images files log pages tmp var '*.log' '*.sh'; do
        BKJS_RSYNC_ARGS="$BKJS_RSYNC_ARGS --exclude $f"
    done
    [ "$BKJS_USER" != "$(whoami)" ] && BKJS_SSH_ARGS="$BKJS_SSH_ARGS -l $BKJS_USER"
    for h in $BKJS_HOST; do
        echo "Deploying the module to $BKJS_SSH_ARGS $BKJS_RSYNC_ARGS $h:$BKJS_PATH"
        rsync -av $BKJS_DEBUG -e "ssh $BKJS_SSH_ARGS" $BKJS_RSYNC_ARGS `ls` $h:$BKJS_PATH
    done
    ;;

  check-backend)
    uptime=$(</proc/uptime)
    uptime=${uptime%%.*}
    if [ $uptime -gt $BKJS_IDLETIME ]; then
       ps=$(ps agx|grep backend|grep worker|grep -v grep)
       if [ "$ps" = "" ]; then
          logger "No backend running, $uptime/$BKJS_IDLETIME, shutting down..."
          echo $ps >> /var/log/messages
          /sbin/halt
       fi
    fi
    if [ $uptime -gt $BKJS_UPTIME ]; then
       logger "Too long running, $uptime/$BKJS_UPTIME, shutting down..."
       /sbin/halt
    fi
    ;;

  log-watch)
    $0 run-shell -log error -log-watch
    ;;

  ntp)
    ntpdate pool.ntp.org > /dev/null 2>&1
    ;;

  backup-backend)
    [ "$BKJS_BACKUP" = "" ] && exit
    DATE=$(date +%m-%d-%y)
    DOW=$(date +%w)
    DAY=$(date +%d|sed 's/^0*//g')
    FILE=backup
    # Even days will have 1 appended to the backup file name
    [ "$BACKUP_TWO" != "" -a $(($DAY % 2)) -eq 0 ] && FILE="${FILE}1"
    # Make backup copies daily/weekly...
    [ "$BACKUP_DAILY" != "" ] && FILE="$FILE$DAY"
    [ "$BACKUP_WEEKLY" != "" ] && FILE="$FILE$DOW"
    [ "$BACKUP_HALFWEEKLY" != "" ] && FILE="$FILE$((6 - $DOW))"
    FILE="$FILE-$HOST"
    # Additional options for tar
    BACKUP_TAR_ARGS="--ignore-failed-read --exclude-backup $BACKUP_TAR_ARGS"
    # File extensions to exclude from the backup
    for ext in $BACKUP_TAR_EXCLUDE; do
       BACKUP_TAR_ARGS="--exclude='*.$ext' $BACKUP_TAR_ARGS"
    done
    # Files and dirs to backup
    BACKUP_FILES="/etc /home/$BKJS_USER $BKJS_HOME/etc $BKJS_HOME/web $BKJS_PREFIX $BACKUP_FILES"
    mkdir -p $BKJS_BACKUP

    # Database backup if exists
    if [ "$BACKUP_PG" != "" -a -d $PG_DIR/base ]; then
       BACKUP_FILES="$BACKUP_FILES $PG_DIR/*.conf"
       # PG directory on CentOS is separate
       [ -e $PG_PREFIX ] && BACKUP_FILES="$BACKUP_FILES $PG_PREFIX"
       $PG_PREFIX/bin/pg_dump -Fc -U postgres $BACKUP_PG > $BKJS_BACKUP/$FILE.pgsql.dump
    fi
    if [ "$BACKUP_MYSQL" != "" -a -d $MYSQL_DIR/mysql ]; then
       $MYSQL_PREFIX/bin/mysqldump $BACKUP_MYSQL > $BKJS_BACKUP/$FILE.mysql.dump
    fi

    # Filesystem backup
    if [ "$BACKUP_FS" != "" ]; then
       tar $BACKUP_TAR_ARGS -czf $BKJS_BACKUP/$FILE.tar.gz $BACKUP_FILES 2>&1 |egrep -v "tar: Removing leading|tar:.+ignored|as we read it"
    fi

    # Send to remote host if configured, must be full ssh url with path like user@host:/path
    [ "$BACKUP_REMOTE" = "" ] && exit

    FILES=""
    [ -f $BKJS_BACKUP/$FILE.tar.gz ] && FILES="$FILES $BKJS_BACKUP/$FILE.tar.gz"
    [ -f $BKJS_BACKUP/$FILE.pgsql.dump ] && FILES="$FILES $BKJS_BACKUP/$FILE.pgsql.dump"
    [ -f $BKJS_BACKUP/$FILE.mysql.dump ] && FILES="$FILES $BKJS_BACKUP/$FILE.mysql.dump"
    [ "$FILES" = "" ] && exit

    for h in $BACKUP_REMOTE; do
      su - $BKJS_USER -c "scp -q $FILES $h"
    done
    ;;

  get-java)
    set -e
    file=java.rpm
    wget -O $file --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u5-b13/jdk-8u5-linux-x64.rpm"
    rpm -Uvh $file
    alternatives --install /usr/bin/java java /usr/java/default/bin/java 20000
    alternatives --set java /usr/java/default/bin/java
    rm -rf $file
    ;;

  init-pgsql)
    if [ ! -f $PG_DIR/postgresql.conf ]; then
       mkdir -p $PG_DIR
       [ "$OS_TYPE" = "amazon" -a -d /var/run/postgresql ] && sudo chown $BKJS_USER /var/run/postgresql
       $PG_PREFIX/bin/initdb -U postgres -D $PG_DIR
       $SED "s/#fsync = on/fsync = off/g" $PG_DIR/postgresql.conf
       $SED "s/#log_destination = 'stderr'/log_destination = 'syslog'/g" $PG_DIR/postgresql.conf
       $PG_PREFIX/bin/postgres -F -D $PG_DIR &
       sleep 3
       $PG_PREFIX/bin/createdb -U postgres backend
    fi
    ;;

  run-pgsql)
    mkdir -p $BKJS_HOME/var $BKJS_HOME/log
    exec nohup $PG_PREFIX/bin/postgres -F -D $PG_DIR >>$BKJS_HOME/log/message.log 2>&1 &
    ;;

  stop-pgsql)
    killall postgres
    ;;

  init-mysql)
    if [ ! -d $MYSQL_DIR/mysql ]; then
       mkdir -p $MYSQL_DIR
       $ECHO "[client]\nuser=root\ndatabase=backend\nport=3306\nsocket=$MYSQL_DIR/mysql.sock\n\n[mysqld]\nport=3306\nsocket=$MYSQL_DIR/mysql.sock\ndatadir=$MYSQL_DIR\nkey_buffer_size=16M\nmax_allowed_packet=500M\ngroup_concat_max_len=16000\n" > ~/.my.cnf
       $MYSQL_PREFIX/bin/mysql_install_db --force --skip-name-resolve --datadir=$MYSQL_DIR --defaults-file=$HOME/.my.cnf
       ($0 run-mysql)
       sleep 3
       $MYSQL_PREFIX/bin/mysql -u root -e "DELETE FROM user WHERE user=''" mysql
       $MYSQL_PREFIX/bin/mysql -u root -e "DROP DATABASE test" mysql
       $MYSQL_PREFIX/bin/mysql -u root -e "CREATE DATABASE backend" mysql
    fi
    ;;

  run-mysql)
    mkdir -p $BKJS_HOME/var $BKJS_HOME/log
    [ -f $MYSQL_PREFIX/bin/mysqld ] && exec nohup $MYSQL_PREFIX/bin/mysqld >>$BKJS_HOME/log/message.log 2>&1 &
    [ -f $MYSQL_PREFIX/libexec/mysqld ] && exec nohup $MYSQL_PREFIX/libexec/mysqld >>$BKJS_HOME/log/message.log 2>&1 &
    ;;

  stop-mysql)
    killall mysqld
    ;;

  init-dynamodb)
    ($0 get-dynamodb)
    ($0 run-dynamodb)
    ;;

  get-dynamodb)
    if [ ! -d $DYNAMODB_PREFIX ]; then
       mkdir -p $DYNAMODB_PREFIX
       curl -L -o ddb.tar.gz http://dynamodb-local.s3-website-us-west-2.amazonaws.com/dynamodb_local_2014-10-07.tar.gz
       tar -C $DYNAMODB_PREFIX -xzf ddb.tar.gz
       rm -rf ddb.tar.gz
    fi
    ;;

  run-dynamodb)
    mkdir -p $BKJS_HOME/var $BKJS_HOME/log
    (cd $BKJS_HOME/var && exec nohup java -Djava.library.path=$DYNAMODB_PREFIX/DynamoDBLocal_lib -jar $DYNAMODB_PREFIX/DynamoDBLocal.jar --port 8181 >>$BKJS_HOME/log/message.log 2>&1 &)
    ;;

  stop-dynamodb)
    kill $(ps agx|grep DynamoDBLocal|grep -v grep|awk '{print $1}')
    ;;

  get-cassandra)
    if [ ! -d $CASSANDRA_PREFIX ]; then
        mkdir -p $CASSANDRA_PREFIX $CASSANDRA_DIR/var $CASSANDRA_DIR/log
        curl -OL http://downloads.datastax.com/community/dsc.tar.gz
        tar -C $CASSANDRA_PREFIX --strip-components=1 -xzf dsc.tar.gz
        rm -rf dsc.tar.gz
        $SED "s|/var/lib/cassandra/|$CASSANDRA_DIR/var/|g" $CASSANDRA_PREFIX/conf/*.{yaml,properties,sh}
        $SED "s|/var/log/cassandra/|$CASSANDRA_DIR/log/|g" $CASSANDRA_PREFIX/conf/*.{yaml,properties,sh}
        chown -R $BKJS_USER $CASSANDRA_DIR $CASSANDRA_PREFIX
    fi
    ;;

  init-cassandra)
    ($0 get-cassandra)
    ($0 run-cassandra)
    sleep 5
    echo "CREATE KEYSPACE BACKEND WITH REPLICATION = {'class': 'SimpleStrategy' , 'replication_factor': 1 };" > /tmp/cql
    $CASSANDRA_PREFIX/bin/cqlsh -f /tmp/cql
    ;;

  run-cassandra)
    mkdir -p $BKJS_HOME/var $BKJS_HOME/log
    $CASSANDRA_PREFIX/bin/cassandra >>$BKJS_HOME/log/message.log 2>&1
    ;;

  stop-cassandra)
    kill $(ps agx|grep cassandra|grep -v grep|awk '{print $1}')
    ;;

  init-elasticsearch)
    ($0 get-elasticsearch)
    ($0 run-elasticsearch)
    ;;

  get-elasticsearch)
    if [ ! -d $ELASTICSEARCH_PREFIX ]; then
        file=elasticsearch-1.3.4.tar.gz
        mkdir -p $ELASTICSEARCH_PREFIX
        curl -OL https://download.elasticsearch.org/elasticsearch/elasticsearch/$file
        tar -C $CASSANDRA_PREFIX --strip-components=1 -xzf $file
        rm -rf $file
    fi
    ;;

  run-elasticsearch)
    $ELASTICSEARCH_PREFIX/bin/elasticsearch >>$BKJS_HOME/log/message.log 2>&1
    ;;

  stop-elasticsearch)
    kill $(ps agx|grep elasticsearch|grep -v grep|awk '{print $1}')
    ;;

  get-mongodb)
    case "$PLATFORM" in
     Darwin)
       OS=osx
       ;;
     Linux)
       OS=linux
       ;;
    esac
    if [ ! -f $BKJS_PREFIX/bin/mongod ]; then
       curl -L -o mongo.tar.gz http://fastdl.mongodb.org/osx/mongodb-$OS-x86_64-2.6.0.tgz
       tar -C $BKJS_PREFIX/bin --strip-components=1 -xzf mongo.tar.gz '*/bin/*'
       rm -rf mongo.tar.gz
    fi
    ;;

  init-mongodb)
    ($0 get-mongodb)
    ($0 run-mongodb)
    ;;

  run-mongodb)
    mkdir -p $MONGO_DIR $BKJS_HOME/var $BKJS_HOME/log
    $BKJS_PREFIX/bin/mongod --fork --dbpath $MONGO_DIR --syslog >>$BKJS_HOME/log/message.log 2>&1
    ;;

  stop-mongodb)
    kill $(ps agx|grep mongod|grep -v grep|awk '{print $1}')
    ;;

  show-help)
    $NODE_BIN -e "require('$BKJS_MOD').core.showHelp()"
    ;;

  clean-backend)
    rm -rf *~ *.o *.a *.so *.dylib *.node *.log build
    ;;

  build-backend)
    set -e
    if [ ! -f build/Makefile -o binding.gyp -nt build/Makefile ]; then
      $NPM_BIN build .
    else
      $NPM_BIN run-script preinstall
      make -C build
      $NPM_BIN run-script postinstall
    fi
    exit 0
    ;;

  build-node)
    if [ ! -d deps/node ]; then
       mkdir -p deps
       (cd deps && git clone -b v0.10 https://github.com/joyent/node.git)
    fi
    (cd deps/node && [ ! -f out/Makefile ] && CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" ./configure --prefix=$BKJS_PREFIX)
    (cd deps/node && git pull && make install clean)
    $NPM_BIN config set nodedir "$(pwd)/deps/node"
    ;;

  build-deps)
    export BKJS_PREFIX=$(pwd)/build
    export CFLAGS="$CFLAGS -fPIC -g -I$BKJS_PREFIX/include"
    export CXXFLAGS="$CXXFLAGS -fPIC -g -I$BKJS_PREFIX/include"
    export LDFLAGS="$LDFLAGS -L$BKJS_PREFIX/lib"
    export PKG_CONFIG_PATH=$BKJS_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH
    [ -d /opt/local/lib ] && export LDFLAGS="$LDFLAGS -L/opt/local/lib" && export CFLAGS="$CFLAGS -I/opt/local/include" && export PKG_CONFIG_PATH=/opt/local/lib/pkgconfig:$PKG_CONFIG_PATH
    [ -d /usr/local/lib ] && export LDFLAGS="$LDFLAGS -L/usr/local/lib" && export CFLAGS="$CFLAGS -I/usr/local/include" && export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
    mkdir -p deps

    pkg-config --silence-errors --exists libopenjp2
    if [ "$?" = "1" -a "$npm_config_backend_openjpeg" != "" -a "$npm_config_backend_imagemagick" != "" ]; then
        if [ ! -d deps/openjpeg ]; then
           (cd deps && svn -r r2871 checkout http://openjpeg.googlecode.com/svn/trunk/ openjpeg)
        fi
        (cd deps/openjpeg && cmake -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_INSTALL_PREFIX=$BKJS_PREFIX -DBUILD_SHARED_LIBS:bool=off -DBUILD_CODEC:bool=off . && make)
        (cd deps/openjpeg && make install)
    fi

    pkg-config --silence-errors --exists libnanomsg
    if [ "$?" = "1" -a "$npm_config_backend_nanomsg" != "" ]; then
        if [ ! -d deps/nanomsg ]; then
            nrepo=nanomsg
            [ "$npm_config_backend_nanomsg_dev" != "" ] && nrepo=vseryakov
            (cd deps && git clone https://github.com/$nrepo/nanomsg.git)
        fi
        (cd deps/nanomsg && git pull && [ ! -f configure ] && ./autogen.sh)
        (cd deps/nanomsg && [ ! -f Makefile ] && ./configure --prefix=$BKJS_PREFIX --enable-static --disable-shared)
        (cd deps/nanomsg && make install)
    fi

    pkg-config --silence-errors --exists Wand
    if [ "$?" = "1" -a "$npm_config_backend_imagemagick" != "" ]; then
        if [ ! -d deps/ImageMagick ]; then
           mkdir -p deps/ImageMagick
           curl -OL http://www.imagemagick.org/download/ImageMagick.tar.gz
           tar -C deps/ImageMagick --strip-components=1 -xzf ImageMagick.tar.gz && rm -rf ImageMagick.tar.gz
        fi
        (cd deps/ImageMagick && [ ! -f Makefile ] && ./configure --prefix=$BKJS_PREFIX --disable-docs --disable-installed --disable-shared --disable-deprecated --enable-zero-configuration --without-x --without-magick-plus-plus --without-perl)
        (cd deps/ImageMagick && make install)
    fi
    exit 0
    ;;

  clean-deps)
    [ -d deps/node ] && make -C deps/node clean distclean
    [ -d deps/ImageMagick ] && make -C deps/ImageMagick clean distclean
    [ -d deps/nanomsg ] && make -C deps/nanomsg clean distclean
    ;;

  npm-deps)
    shift;
    modules=$($NODE_BIN -e 'try{console.log(Object.keys(JSON.parse(require("fs").readFileSync("package.json")).dependencies).join(" "))}catch(e){}' | sed "s/$BKJS//g")
    [ "$modules" != "" ] && $NPM_BIN install $modules $@
    ;;

  pack-app)
    [ ! -f package.json ] && $ECHO "No package.json found" && exit
    NAME=app
    [ "$1" != "" -a "${1:0:1}" != "-" ] && NAME=$1 && shift
    npm install
    zip -r ../$NAME . -x '.*' -x 'etc/*.local'
    ;;

  init-app)
    [ -f core.js ] && $ECHO "Cannot create new app inside the backend sources, please use some other directory\n" && exit
    NAME=app
    [ "$1" != "" -a "${1:0:1}" != "-" ] && NAME=$1 && shift
    mkdir -p etc web
    if [ ! -e README.md ]; then
       cat > README.md <<@@@
# Backend.js application

# Installation
 - npm install

# Running
 - ./app.sh
 - point the browser to http://localhost:8000/api.html

# Authors
$(whoami)

@@@
    fi

    [ ! -e $NAME.sh ] && $ECHO "#!/bin/bash\n\nexec $NODE_BIN $NAME.js -watch \`pwd\` -web -debug -etc-dir \`pwd\`/etc -web-dir \`pwd\`/web \$@\n" > $NAME.sh && chmod 755 $NAME.sh
    [ ! -e .gitignore ] && $ECHO "*~\n.*\nbin/\ndocs/\ndeps/\nvar/\nfiles/\nimages/\ntmp/\nlog/\nnode_modules/\n" >> .gitignore

    if [ ! -e etc/config ]; then
       cat > etc/config <<@@@
#debug=1
#port=80
#repl-port=2080
#repl-port-web=2081
#db-pool=pgsql
#db-mysql-pool=mysql:///backend
#db-cassandra-pool=cql://127.0.0.1/backend
#db-pgsql-pool=postgresql://postgres@127.0.0.1/backend
#db-dynamodb-pool=http://localhost:8181
#db-mongodb=mongodb://localhost
#aws-key=XXXXX
#aws-secret=XXXXX
#api-images-s3=S3BucketName
#server-max-processes=2
#api-unsecure=data
#max-distance=160
#logwatcher-interval=3600
#logwatcher-email=logwatcher@dot.com
#server-jobs-interval=0
#api-caching=bk_auth,bk_counter
#api-allow-path=^/open/url$
#cache-host=10.1.1.1
#msg-host=10.1.1.1
#redis-host=10.1.1.1
@@@
    fi

    if [ ! -e $NAME.js ]; then
      cat > $NAME.js <<@@@
//
// Backend app
// Created by $(whoami) on $(date)
//
var backend = require('$BKJS_MOD');
var db = backend.db;
var api = backend.api;
var core = backend.core;
var logger = backend.logger;

api.describeTables({
    // New table
    test: {
        id: { primary: 1 },
        name: {},
        mtime: { type: "bigint", now: 1 },
    },
    // Extend accounts table
    bk_account: {
        status: { value: "active" },
    },
    // Extend locations table, keep account status for filtering
    bk_location: {
        status: { pub: 1 },
    },
    // Add out custom counters updated on connections of type 'test'
    bk_counter: {
        test0: { type: "counter", value: 0, pub: 1, autoincr: 1 },
        test1: { type: "counter", value: 0 },
    },
});

// Modify every row returned to the client, we can add/del properties
api.processTestRow = function(row, options, cols)
{
    row.url = '/test/list';
    return row;
}

api.initMiddleware = function()
{
}

api.initApplication = function(callback)
{
    db.setProcessRow('test', this.processTestRow);

    // Add new record
    this.app.all(/^\/test\/add/, function(req, res) {
        db.add('test', { id: req.query.id, name: req.query.name }, function(err, rows) {
            api.sendReply(res, err);
        });
    });
    // Update record
    this.app.all(/^\/test\/update/, function(req, res) {
        if (!req.query.id || !req.query.name) return api.sendRepy(res, { status: 400, message: "id and name required" });

        db.update('test', req.query, function(err, rows) {
            api.sendReply(res, err);
        });
    });
    // Retrieve record by id
    this.app.all(/^\/test\/([0-9]+)/, function(req, res) {
        var options = api.getOptions(req);
        db.get('test', { id: req.params[0] }, options, function(err, rows) {
            res.json(rows);
        });
    });
    callback()
};

api.registerPostProcess('', /^\/account\/([a-z\/]+)$/, function(req, res, rows) {
    var self = this;
    switch (req.params[0]) {
    case 'add':
       // Perform our own additional work for new accounts, req.account contains new account record
       db.add('test', { id: req.account.id });
       break;
    case 'del':
       db.del('test', { id: req.account.id });
       break;
    }
});

// Redirect on unauthorized access to the files
api.registerPreProcess('', /^\/test\/list$/, function(req, status, callback) {
    if (status.status != 200) {
        status.status = 302;
        status.url = '/public/index.html';
    }
    callback(status);
});

backend.server.start();
@@@
      $ECHO "{\n \"version\": \"0.1.0\",\n \"author\": \"$(whoami)\",\n \"name\": \"app\",\n \"description\": \"The backend\",\n \"main\": \"app.js\",\n \"dependencies\": {\n    \"$BKJS_MOD\": \">=0.9.0\"\n },\n \"engines\": { \"node\": \">= 0.10\" },\n \"scripts\": { \"start\": \"node app.js\" },\n \"license\": \"BSD-3-Clause\" }" > package.json
    fi
    ;;

  run-app)
    NAME=app
    [ "$1" != "" -a "${1:0:1}" != "-" ] && NAME=$1 && shift
    $NODE_BIN $NAME.js -debug -watch `pwd` -web $@
    ;;

  show-env)
    set
    ;;

  *)
    [ "$ARG" != "" ] && echo "error: unknown command: $ARG: $@"
    echo ""
    echo "usage: $BK command ..."
    echo "  where command is:"
    echo ""
    echo "  start - start the backend service"
    echo "  restart - restart the backend service"
    echo "  stop - stop the backend service"
    echo "  stop-web - kill Web worker processes so they will restart with possibly new node modules synced from the master host"
    echo "  init-server [-user USER] [-home HOME] [-doman DOMAIN] [-host HOST] - initialize the backend environment, setup the Linux server with packages and change system config files for production use (Amazon AMI, CentOS)"
    echo "  init-hostname [-host HOST] - set the hostname"
    echo "  init-user [-user NAME] - create a new user for the backend"
    echo "  init-ssh - setup SSH permissions, allow only public key auth"
    echo "  init-logrotate - setup logrotate for the backend log files"
    echo "  init-rsyslog - setup rsyslog to use for the backend logging, access log and backend log"
    echo "  init-system - setup system wide parameters, tuniing, limits, permissions"
    echo "  init-postfix - [-domain DOMAIN] install and configure postfix for the domain"
    echo "  init-dns - install and setup dnsmasq for local cahching DNS server"
    echo "  init-instance - configure for temporary job instance"
    echo "  init-service - create bkjs service to be run on server startup, i.e. makes symlink /etc/init.d/$BKJS after which regular 'service' command can be used to manage the $BKJS service"
    echo "  init-sync - setup a cron job to run sync-backend command every 5 minites to check for new software on the \$BKJS_SYNC server"
    echo "  init-packages - install required packges and updates"
    echo "  init-devel - install development packages for node and modules compiclation"
    echo "  init-home - setup backend home with required folders"
    echo "  init-app - create application skeleton for an application based on the backend, app name can be specified as the first argument"
    echo "  run-server - run the backend server process, this command is supposed to be run on system startup by start command"
    echo "  run-shell - run backend REPL in the current backend directory, works with the backend core or local app.js application"
    echo "  run-backend - run local backend server or the app.js if present, all command line params will be passed to the backend.js"
    echo "  put-backend path [-host HOST] [-path PATH] [-user USER] [-ssh OPTS] [-exclude PATTERN] [-delete] - push the backend code to the master server, uses env BKJS_HOST or host parameter from the command line, replaces all files and removes non-existing on the dest except in web/ directory, default path is ~/node_modules/$BKJS_MOD"
    echo "  sync-backend - synchronize other directories from the master host, runs on the instance, must use BKJS_SYNC set to the host name where to get files"
    echo "  check-backend - to be run on instances, check for idleness,if no jobs running then shutdown the host"
    echo "  backup-backend - run the backup script, store in \$BKJS_BACKUP, can be used in crontabs with symlink"
    echo "  init-pgsql - setup and run the PostgreSQL server, install in $PG_PREFIX, data files in $PG_DIR"
    echo "  run-pgsql - run local PostgreSQL server"
    echo "  stop-pgsql - stop local PostgreSQL server"
    echo "  init-dynamodb - download and install local DynamoDB, start the server"
    echo "  get-dynamodb - install local DynamoDB server in $BKJS_PREFIX/dynamodb"
    echo "  run-dynamodb - run local DynamoDB server installed in $BKJS_PREFIX/dynamodb, data files in $BKJS_HOME/var"
    echo "  stop-dynamodb - stop local DynamoDB server"
    echo "  get-cassandra - download and install Cassandra server in $CASSANDRA_PREFIX"
    echo "  init-cassandra - download and initialize Cassandra, create backend keyspace, run the server"
    echo "  run-cassandra - run local Cassandra server installed in $CASSANDRA_PREFIX, data files in $CASSANDRA_DIR"
    echo "  stop-cassandra - stop local Cassandra server"
    echo "  init-elasticsearch - download and install local ElasticSearch, start the server"
    echo "  get-elasticsearch - install local ElasticSearch server in $BKJS_PREFIX/elasticsearch"
    echo "  run-elasticsearch - run local ElasticSearch server installed in $BKJS_PREFIX/elasticsearch"
    echo "  stop-elasticsearch - stop local ElasticSearch server"
    echo "  init-mysql - setup MySQL server for development and create backend database, start the server"
    echo "  run-mysql - run local MySQL server installed in $MYSQL_DIR"
    echo "  stop-mysql - stop local MySQL server"
    echo "  init-mongodb - download and start the Mongo server"
    echo "  get-mongodb - download Mongo server and install in $BKJS_PREFIX/bin"
    echo "  run-mongodb - run local Mongo server installed in $BKJS_PREFIX/bin, db path is $MONGO_DIR"
    echo "  stop-mongodb - stop local Mongo server"
    echo "  build-deps - build all required nad optional software for the backend binary module"
    echo "  build-node - build node and install in $BKJS_PREFIX or in [-prefix PATH], on Linux init-devel should be called before this command to install devel packages"
    echo "  build-backend - compile all required modules and libraries for the backend development(node.js, libs)"
    echo "  clean-backend - clean the source directory"
    echo "  clean-deps - clean dependencies binary and object files"
    echo "  npm-deps - install required node.js packages specified in the package.json as dependencies"
    echo "  show-help - show all backend command line and config parameters"
    echo ""
    echo "bksh subcommands:"
    echo "  -account-add login LOGIN secret SECRET [name NAME] [email EMAIL] [type TYPE] ... - add a new user for API access, any property from bk_account can be passed in the form: name value "
    echo "  -account-update [login LOGIN|id ID] [name NAME] [email EMAIL] [type TYPE] ... - update existing user properties, any property from bk_account can be passed in the form: name value "
    echo "  -account-del [login LOGIN|id ID] [-keep message] [-keep location]... - delete a new user, 'keep TABLE' tells which records to keep the TABLE being account tables without bk_ prefix, one of auth,counter,account,location,connection,message,icon"
    echo "  -location-put [login LOGIN|id ID] latitude LAT longitude LON ... - update location for an account"
    echo "  -send-request -url URL [-id ID|-login LOGIN] param value param value ... - send API request to the server specified in the url as user specified by login or account id, resolving the user is done directly from the current db pool, param values should not be url-encoded"
    echo "  -log-watch - run logwatcher and exit, send emails in case any errors found"
    echo "  -s3-get -bucket BUCKET -path PATH - retrieve a file from S6"
    echo "  -s3-put -bucket BUCKET -path PATH -fle FILE - store a file to S3"
    echo "  -db-list -table TABLE [name VALUE ...] - return all records from the table or only that match given column values"
    echo "  -db-put -table TABLE name VALUE ... - add or replace a record in the config table, name value pairs are column name and value to be set for the record to be added"
    echo "  -db-del -table TABLE name VALUE ... - delete a record from the table, name value pairs must define a primary key for the table"
    echo ""
    echo "Common options:"
    echo "  -root path - path to the backend home directory, default is $BKJS_HOME"
    echo "  -home path - same as -root"
    echo "  -prefix path - path to the local binaries directory, default is $BKJS_PREFIX"
    echo "  -user name - set backend user on the remote or local side, default is $BKJS_USER"
    echo "  -host host - host to be used transfer or sync, default is $BKJS_HOST"
    echo "  -path path - path to be used for transfer or sync, default is $BKJS_PATH"
    echo "  -ssh opts - pass additional parameters to the ssh command"
    ;;
esac

