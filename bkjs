#!/bin/bash
#
#  Author: Vlad Seryakov vseryakov@gmail.com
#  Sep 2013
#
# chkconfig: 2345 91 91
# description: backendjs server
#

BKJS=bkjs
BKJS_MOD=backendjs

HOST=$(uname -n | awk -F. '{print $1}')
PLATFORM=$(uname -s)
case "$PLATFORM" in
  Linux)
    [ "$(grep CentOS /etc/issue)" != "" ] && OS_TYPE=centos
    [ "$(grep Amazon /etc/issue)" != "" ] && OS_TYPE=amazon
    # In multi-OS environment have to sync by OS type due to different dependencies in each distro
    [ "$PG_PREFIX" = "" ] && PG_PREFIX=$(find /usr -maxdepth 1 -name 'pgsql*' -type d -print|sort -r|head -1)
    [ -f /etc/sysconfig/$BKJS ] && . /etc/sysconfig/$BKJS
    KILLALL="killall -qr"
    ECHO="echo -e"
    SED="sed -r -i"
    ;;

  Darwin)
    OS_TYPE=macosx
    [ "$BKJS_HOME" = "" ] && export BKJS_HOME=~/.bkjs
    [ "$BKJS_PREFIX" = "" ] && export BKJS_PREFIX=/opt/local
    [ "$PG_PREFIX" = "" ] && export PG_PREFIX=$(find $BKJS_PREFIX/lib -maxdepth 1 -name 'postgresql*' -type d -print|sort -r|head -1) && PG_LIBDIR=$PG_PREFIX
    [ "$MYSQL_PREFIX" = "" ] && export MYSQL_PREFIX=$(find $BKJS_PREFIX/lib -maxdepth 1 -name 'mysql*' -type d -print|sort -r|head -1)
    [ "$REDIS_PREFIX" = "" ] && REDIS_PREFIX=/opt/local
    KILLALL="killall -m"
    ECHO=echo
    SED="sed -E -i .orig"
    ;;

  *)
    echo "Unsupported platform"
    exit 1
    ;;
esac

# There are special commands that can be used as the script name
NAME=$(basename $0)
case "$NAME" in
  bksh)
    ARG=$NAME
    ;;

  *)
    ARG=$1;shift
    ;;
esac

# Returns an argument value by name, format is -name value
ARGS=("$@")
get_arg() {
  for ((i = 0;i < ${#ARGS[@]}; ++i)); do
    [ "$1" = "${ARGS[i]}" ] && echo "${ARGS[i+1]}" && return 0
  done
  echo "$2"
}

# Returns 1 if an argument exists
get_flag() {
  for ((i = 0;i < ${#ARGS[@]}; ++i)); do
    [ "$1" = "${ARGS[i]}" ] && echo "1" && return 0
  done
}

# Concatenate args
concat_arg() {
  _v=$(get_arg $1)
  [ "$_v" == "" ] && echo $2
  [ "$2" != "" ] && _v="$2 $_v"
  echo "$_v"
}

# Return value of the named pair from the variable that holds all them
get_value() {
  v=$(echo "$1"|awk -F= "{if(\$1==\"$2\" && \$2!=\"\") print \$2}")
  echo "${v:-$3}"
}

# Return config parameter value by name
get_config() {
  for ((i = 0;i < ${#ARGS[@]}; ++i)); do
    [ "$2" = "${ARGS[i]}" ] && eval "$1=${ARGS[i+1]}" && return 0
  done
  [ -z $DB_ARGS ] && DB_ARGS=(`$BKJS_GET_CONFIG`)
  for ((i = 0;i < ${#DB_ARGS[@]}; ++i)); do
    [ "$2" = "${DB_ARGS[i]}" ] && eval "$1=${DB_ARGS[i+1]}" && return
  done
  [ "$3" != "" ] && eval "$1=$3"
}

# Home must be specified for the script to work properly
export BKJS_HOME=$(get_arg -home $BKJS_HOME)
[ "$BKJS_HOME" = "" ] && export BKJS_HOME=$(sh -c "echo ~$BKJS_USER")
[ -f $BKJS_HOME/etc/profile ] && . $BKJS_HOME/etc/profile

# Global options that are used thoughout the script
export BKJS_DEBUG=$(get_arg -debug $BKJS_DEBUG)
export BKJS_DRY_RUN=$(get_flag -dry-run $BKJS_DRY_RUN)
export BKJS_PREFIX=$(get_arg -prefix $BKJS_PREFIX)
export BKJS_USER=$(get_arg -user $BKJS_USER)
export BKJS_GROUP=$(get_arg -group $BKJS_GROUP)
export BKJS_DOMAIN=$(get_arg -domain $BKJS_DOMAIN)
export BKJS_HOST=$(get_arg -host $BKJS_HOST)
export BKJS_SYNC=$(get_arg -sync $BKJS_SYNC)
export BKJS_PATH=$(get_arg -path $BKJS_PATH)
export BKJS_ARGS=$(concat_arg -args $BKJS_ARGS)
export BKJS_SSH_ARGS=$(concat_arg -ssh $BKJS_SSH_ARGS)
export BKJS_RSYNC_ARGS=$(concat_arg -rsync $BKJS_RSYNC_ARGS)
export BKJS_GET_CONFIG="$0 run-shell -log none -db-get-config -format args $@"

# Setup all variables with the defaults
[ "$BKJS_HOST" = "" ] && export BKJS_HOST=$(uname -n|awk -F. '{print $1}')
[ "$BKJS_USER" = "" ] && export BKJS_USER=$(whoami)
[ "$BKJS_GROUP" = "" ] && export BKJS_GROUP=$(id -gn)
[ "$BKJS_PREFIX" = "" ] && export BKJS_PREFIX=/usr/local
[ "$BKJS_BACKUP" = "" ] && export BKJS_BACKUP=$BKJS_HOME/backup
[ "$CASSANDRA_PREFIX" = "" ] && export CASSANDRA_PREFIX=$BKJS_PREFIX/cassandra
[ "$CASSANDRA_DIR" = "" ] && export CASSANDRA_DIR=$BKJS_HOME/var/cassandra
[ "$PG_PREFIX" = "" ] && export PG_PREFIX=/usr
[ "$PG_LIBDIR" = "" ] && export PG_LIBDIR=$PG_PREFIX/lib
[ "$PG_DIR" = "" ] && export PG_DIR=$BKJS_HOME/var/postgres
[ "$MYSQL_DIR" = "" ] && export MYSQL_DIR=$BKJS_HOME/var/mysql
[ "$MYSQL_PREFIX" = "" ] && export MYSQL_PREFIX=/usr
[ "$DYNAMODB_PREFIX" = "" ] && export DYNAMODB_PREFIX=$BKJS_PREFIX/dynamodb
[ "$ELASTICSEARCH_PREFIX" = "" ] && export ELASTICSEARCH_PREFIX=$BKJS_PREFIX/elasticsearch
[ "$ELASTICSEARCH_DIR" = "" ] && export ELASTICSEARCH_DIR=$BKJS_HOME/var
[ "$MONGO_DIR" = "" ] && export MONGO_DIR=$BKJS_HOME/var/mongo
[ "$BKJS_IDLETIME" = "" ] && export BKJS_IDLETIME=900
[ "$BKJS_UPTIME" = "" ] && export BKJS_UPTIME=43200
[ "$REDIS_PREFIX" = "" ] && export REDIS_PREFIX=$BKJS_HOME

# Setup paths
export PATH=$BKJS_HOME/bin:$BKJS_HOME/node_modules/.bin:$BKJS_PREFIX/bin:$PG_PREFIX/bin:$CASSANDRA_PREFIX/bin:/sbin:/usr/sbin:/usr/local/bin:/opt/local/bin:$PATH
export PKG_CONFIG_PATH=$BKJS_PREFIX/lib/pkgconfig:$PG_LIBDIR/pkgconfig:$PKG_CONFIG_PATH

# Locate binaries after all variables are set
[ "$NODE_BIN" = "" ] && export NODE_BIN=$(which node 2>/dev/null)
[ "$NODE_BIN" = "" ] && export NODE_BIN=$BKJS_PREFIX/bin/node
[ "$NPM_BIN" = "" ] && export NPM_BIN=$(which npm 2>/dev/null)
[ "$NPM_BIN" = "" ] && export NPM_BIN=$BKJS_PREFIX/bin/npm
[ "$BKJS_BIN" = "" ] && export BKJS_BIN=$(which bkjs 2>/dev/null)
[ "$BKJS_BIN" = "" ] && export BKJS_BIN=$BKJS_PREFIX/bin/$BK

case "$ARG" in
  start)
    $0 run-setup
    echo "Starting $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME $BKJS_ARGS $@"
    $0 run-${BKJS_SERVER:-monitor}
    ;;

  restart)
    $0 stop
    sleep 3
    $0 start
    ;;

  restart-api)
    $KILLALL -USR2 "$BKJS: server"
    $KILLALL -USR2 "$BKJS: master"
    exit 0
    ;;

  stop)
    $KILLALL $1 "$BKJS:"
    sleep 1
    $KILLALL $1 "$BKJS:"
    exit 0
    ;;

  stop-web|stop-server|stop-master|stop-worker)
    name=${ARG:5}
    [ "$name" = "" ] && exit 0
    $KILLALL $1 "$BKJS: $name"
    exit 0
    ;;

  install)
    [ "$(whoami)" != "root" ] && echo "Run as root please" && exit 1
    $0 init-server "$@"
    $0 init-devel "$@"
    [ "$(which node 2>/dev/null)" = "" ] && (cd $BKJS_HOME && sudo -H -u $BKJS_USER $0 build-node -prefix $BKJS_PREFIX)
    (cd $BKJS_HOME && sudo -H -u $BKJS_USER $0 install-bkjs -args $BKJS_ARGS)
    (cd $BKJS_HOME/bin && ln -sf ../node_modules/$BKJS_MOD/bkjs && ln -sf ../node_modules/$BKJS_MOD/bkjs bksh)
    chown -R $BKJS_USER $BKJS_HOME
    ;;

  install-ec2)
    $0 install -user ec2-user -home /home/ec2-user -prefix /home/ec2-user "$@"
    ;;

  init-server)
    echo "Installing in $BKJS_HOME for $BKJS_USER with prefix $BKJS_PREFIX ..."

    # Install required packages and utilities
    ($0 init-packages "$@")

    ($0 init-hostname "$@")
    ($0 init-ssh "$@")
    ($0 init-user "$@")
    ($0 init-system "$@")
    ($0 init-service "$@")
    ($0 init-monit-system "$@")
    ($0 init-monit-bkjs "$@")
    ($0 init-logrotate "$@")
    ($0 init-rsyslog "$@")
    ($0 init-home "$@")

    # Create global profile
    echo "BKJS_HOME=$BKJS_HOME" > /etc/sysconfig/$BKJS
    [ "$BKJS_DOMAIN" != "" ] && echo "BKJS_DOMAIN=$BKJS_DOMAIN" >> /etc/sysconfig/$BKJS
    ;;

  init-hostname)
    # Set hostname with name and domain
    if [ "$BKJS_DOMAIN" = "" ]; then
       BKJS_HOST=$(get_arg -host)
       [ "$BKJS_HOST" = "" ] && exit
       BKJS_DOMAIN=$(uname -n|cut -d. -f2-)
    fi
    host=$BKJS_HOST.$BKJS_DOMAIN
    [ "$(uname -n)" = "$host" ] && exit
    echo "Configuring hostname $host ..."
    hostname $host
    echo $host > /etc/hostname
    if [ -f /etc/sysconfig/network ]; then
       echo "HOSTNAME=$host" > /tmp/network
       grep -v HOSTNAME /etc/sysconfig/network >> /tmp/network
       mv /tmp/network /etc/sysconfig/network
    fi
    ;;

  check-hostname)
    # Check hostname for the eth0 and setup /etc/hosts with EC2 host name
    addr=$(ifconfig eth0|grep 'inet '|sed 's/addr://'|awk '{print $2}')
    [ "$addr" = "" ] && echo "No IP address found" && exit
    host=ip-$(echo $addr|sed 's/\./-/g')
    domain=${BKJS_DOMAN:-$(uname -n|cut -d. -f2-)}
    hostname=$host
    [ "$domain" != "" ] && hostname="$host.$domain"
    if [ "$(grep -s $addr /etc/hosts)" = "" -o "$(grep -s $host /etc/hosts)" = "" ]; then
       echo "127.0.0.1 localhost localhost.localdomain" > /etc/hosts
       echo "$addr $hostname" >> /etc/hosts
       echo "$addr localip" >> /etc/hosts
       $0 init-hostname -host $host -domain $domain
    fi
    ;;

  init-user)
    # Add local user
    LHOME=/home/$BKJS_USER
    if [ "$(grep -s $BKJS_USER /etc/passwd)" = "" ]; then
       echo "Adding user $BKJS_USER..."
       useradd -g 0 -m $BKJS_USER
       echo "$BKJS_USER ALL = NOPASSWD: ALL" > /etc/sudoers.d/$BKJS
       mkdir -p -m 700 $LHOME/.ssh && chown $BKJS_USER $LHOME/.ssh
       # Copy ssh config if running on Amazon instance
       [ -d /home/ec2-user -a "$BKJS_USER" != "ec2-user" ] && cp /home/ec2-user/.ssh/authorized_keys $LHOME/.ssh && chown $BKJS_USER $LHOME/.ssh/*
    fi

    # Allow path in sudo and skip tty for our user so we can run commands via ssh
    if [ ! -f /etc/sudoers.d/$BKJS ]; then
       echo "Defaults secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin:$BKJS_PREFIX/bin:$LHOME/bin:$LHOME/node_modules/.bin" >> /etc/sudoers.d/$BKJS
       echo "Defaults:$BKJS_USER !requiretty" >> /etc/sudoers.d/$BKJS
    fi

    # Aliases and environment
    if [ "$(grep -s '#Bkjs' $LHOME/.bashrc)" = "" ]; then
       echo "Configuring .bashrc..."
       echo '#Bkjs' >> $LHOME/.bashrc
       echo "umask 022" >> $LHOME/.bashrc
       echo "BKJS_HOME=$BKJS_HOME" >> $LHOME/.bashrc
       echo "export PATH=\$PATH:$LHOME/bin:$LHOME/node_modules/.bin" >> $LHOME/.bashrc
       echo 'alias slog="tail -100 /var/log/messages"' >> $LHOME/.bashrc
       echo "alias mlog=\"tail -100 $BKJS_HOME/log/message.log\"" >> $LHOME/.bashrc
       echo "alias elog=\"tail -100 $BKJS_HOME/log/error.log\"" >> $LHOME/.bashrc
       echo "alias alog=\"tail -100 $BKJS_HOME/log/access.log\"" >> $LHOME/.bashrc
       echo 'alias h="history"' >> $LHOME/.bashrc
       echo 'alias ll="ls -la"' >> $LHOME/.bashrc
       echo 'alias ps="ps augx"' >> $LHOME/.bashrc
       echo 'alias mc="mc -b"' >> $LHOME/.bashrc
       echo 'alias df="df -h"' >> $LHOME/.bashrc
       echo 'bcp() { socat readline,history=$HOME/.socat tcp4:localhost:$((2080+${1-0})); }' >> $LHOME/.bashrc
       echo 'ec2ssh() { ssh -i ~/.ssh/$2.pem -l ec2-user $1 $3; }' >> $LHOME/.bashrc
       echo 'ec2scp() { scp -r -i ~/.ssh/$3.pem $1 ec2-user@$2; }' >> $LHOME/.bashrc
    fi
    ;;

  init-home)
    # Create required directories
    mkdir -p $BKJS_HOME/node_modules $BKJS_HOME/bin $BKJS_HOME/log $BKJS_HOME/etc $BKJS_HOME/var
    if [ "$BKJS_USER" != "root" -a ! -f $BKJS_HOME/etc/config ]; then
       echo "Creating default $BKJS config ..."
       $ECHO "uid=$BKJS_USER\nforce-uid=1" > $BKJS_HOME/etc/config
    fi
    chown -R $BKJS_USER $BKJS_HOME
    ;;

  init-ssh)
    # Allow only pubkey auth
    if [ "$(grep -s '#Bkjs' /etc/ssh/sshd_config)" = "" ]; then
       echo "Configuring ssh..."
       egrep -v '^(#Bkjs|PasswordAuth|GSSAPIAuth|MaxAuth|MaxSess|ClientAlive|PermitRootLogin)' /etc/ssh/sshd_config > /tmp/sshd_config
       echo "" >> /tmp/sshd_config
       echo "#Bkjs config" >> /tmp/sshd_config
       echo "PasswordAuthentication no" >> /tmp/sshd_config
       echo "GSSAPIAuthentication no" >> /tmp/sshd_config
       echo "MaxAuthTries 5" >> /tmp/sshd_config
       echo "MaxSessions 10" >> /tmp/sshd_config
       echo "ClientAliveInterval 15" >> /tmp/sshd_config
       echo "ClientAliveCountMax 5" >> /tmp/sshd_config
       echo "PermitRootLogin no" >> /tmp/sshd_config
       mv /tmp/sshd_config /etc/ssh
       chmod 600 /etc/sshd_config
       service sshd restart
    fi
    ;;

  init-logrotate)
    # Setup logrotate for backend log files
    if [ "$(grep -s '#Bkjs' /etc/logrotate.d/syslog)" = "" ]; then
       echo "Configuring logrotate..."
       echo "#Bkjs" > /etc/logrotate.d/syslog
       echo "/var/log/cron /var/log/messages {" >> /etc/logrotate.d/syslog
       echo " missingok" >> /etc/logrotate.d/syslog
       echo " daily" >> /etc/logrotate.d/syslog
       echo " rotate 14" >> /etc/logrotate.d/$BKJS
       echo " sharedscripts" >> /etc/logrotate.d/syslog
       echo " postrotate" >> /etc/logrotate.d/syslog
       echo "  /usr/bin/killall -q -HUP rsyslogd" >> /etc/logrotate.d/syslog
       echo " endscript" >> /etc/logrotate.d/syslog
       echo "}" >> /etc/logrotate.d/syslog
    fi
    if [ "$(grep -s "#Bkjs $BKJS_HOME" /etc/logrotate.d/$BKJS)" = "" ]; then
       echo "Configuring logrotate.d/$BKJS..."
       echo "#Bkjs $BKJS_HOME" > /etc/logrotate.d/$BKJS
       echo "$BKJS_HOME/log/message.log $BKJS_HOME/log/access.log {" >> /etc/logrotate.d/$BKJS
       echo " missingok" >> /etc/logrotate.d/$BKJS
       echo " daily" >> /etc/logrotate.d/$BKJS
       echo " rotate 14" >> /etc/logrotate.d/$BKJS
       echo " sharedscripts" >> /etc/logrotate.d/$BKJS
       echo " postrotate" >> /etc/logrotate.d/$BKJS
       echo "  /usr/bin/killall -q -HUP rsyslogd" >> /etc/logrotate.d/$BKJS
       echo " endscript" >> /etc/logrotate.d/$BKJS
       echo "}" >> /etc/logrotate.d/$BKJS
    fi
    ;;

  init-rsyslog)
    # Setup syslog config for backend logging
    if [ "$(grep -s '#Bkjs' /etc/rsyslog.conf)" = "" ]; then
       echo "Configuring rsyslog..."
       echo "#Bkjs" > /etc/rsyslog.conf
       echo '$ModLoad imklog' >> /etc/rsyslog.conf
       echo '$ModLoad imuxsock' >> /etc/rsyslog.conf
       echo '$ModLoad imudp' >> /etc/rsyslog.conf
       echo '$UDPServerAddress 127.0.0.1' >> /etc/rsyslog.conf
       echo '$UDPServerRun 514' >> /etc/rsyslog.conf
       echo '$MaxMessageSize 64k' >> /etc/rsyslog.conf
       echo '$SystemLogRateLimitInterval 1' >> /etc/rsyslog.conf
       echo '$SystemLogRateLimitInterval 1' >> /etc/rsyslog.conf
       echo '$SystemLogRateLimitBurst 10000' >> /etc/rsyslog.conf
       echo '$ActionFileDefaultTemplate RSYSLOG_FileFormat' >> /etc/rsyslog.conf
       echo '$IncludeConfig /etc/rsyslog.d/*.conf' >> /etc/rsyslog.conf
       echo 'kern.*,*.emerg /dev/console' >> /etc/rsyslog.conf
       echo 'cron.* /var/log/cron' >> /etc/rsyslog.conf
       echo 'local7.* /var/log/boot.log' >> /etc/rsyslog.conf
       echo "\$FileOwner $BKJS_USER" >> /etc/rsyslog.conf
       echo '*.info;cron.none,local0.none,local5.none /var/log/messages' >> /etc/rsyslog.conf
       rm -rf /var/log/maillog* /var/log/secure* /var/log/spooler*
       touch /var/log/messages
       chown -R $BKJS_USER /var/log/messages
       service rsyslog restart
    fi
    if [ "$(grep -s "#Bkjs $BKJS_HOME" /etc/rsyslog.d/$BKJS.conf)" = "" ]; then
       echo "Configuring rsyslog.d/$BKJS ..."
       echo "#Bkjs $BKJS_HOME" > /etc/rsyslog.d/$BKJS.conf
       echo "\$FileOwner $BKJS_USER" >> /etc/rsyslog.d/$BKJS.conf
       echo "local0.* $BKJS_HOME/log/message.log" >> /etc/rsyslog.d/$BKJS.conf
       echo "local5.* $BKJS_HOME/log/access.log" >> /etc/rsyslog.d/$BKJS.conf
       mkdir -p $BKJS_HOME/log
       chown -R $BKJS_USER $BKJS_HOME/log
       service rsyslog restart
    fi
    ;;

  init-system)
    # Disable SELinux
    if [ -f /etc/selinux/config ]; then
        sed -i 's/SELINUX=(enforcing|permissive)/SELINUX=disabled/' /etc/selinux/config
    fi

    # Disable internal firewall
    chkconfig iptables off
    service iptables stop

    # Make sure monit is running all the time
    echo "set logfile syslog" > /etc/monit.d/logging
    chkconfig monit on
    service monit restart

    # Allow sudo use local binaries
    sed -i 's/requiretty/!requiretty/' /etc/sudoers

    # File handles and coredumps for debugging
    if [ ! -f /etc/security/limits.d/99-$BKJS.conf ]; then
       $ECHO '* soft core unlimited' > /etc/security/limits.d/90-$BKJS.conf
       $ECHO '* hard core unlimited' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO '* soft nofile 512000' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO '* hard nofile 512000' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO 'root soft nofile 512000' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO 'root hard nofile 512000' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO '* soft memlock unlimited' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO '* hard memlock unlimited' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO 'root soft memlock unlimited' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO 'root hard memlock unlimited' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO '* soft as unlimited' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO '* hard as unlimited' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO 'root soft as unlimited' >> /etc/security/limits.d/90-$BKJS.conf
       $ECHO 'root hard as unlimited' >> /etc/security/limits.d/90-$BKJS.conf
    fi

    # System tuning
    if [ "$(grep -s '#Bkjs' /etc/sysctl.conf)" = "" ]; then
       echo "#Bkjs" >> /etc/sysctl.conf
       echo 'kernel.core_uses_pid=0' >> /etc/sysctl.conf
       echo 'vm.max_map_count=262144' >> /etc/sysctl.conf
       echo 'vm.min_free_kbytes=65536' >> /etc/sysctl.conf
       echo 'net.core.somaxconn=16384' >> /etc/sysctl.conf
       echo 'net.core.netdev_max_backlog=16384' >> /etc/sysctl.conf
       echo 'net.core.rmem_max=8388608' >> /etc/sysctl.conf
       echo 'net.core.wmem_max=8388608' >> /etc/sysctl.conf
       echo 'net.ipv4.ip_local_port_range=1024 65000' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_tw_reuse=1' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_tw_recycle=1' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_fin_timeout=15' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_keepalive_intvl=15' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_slow_start_after_idle=0' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_max_orphans=262144' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_max_syn_backlog=16384' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_max_tw_buckets=400000' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_no_metrics_save=1' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_syn_retries=2' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_synack_retries=2' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_rmem=8192 256000 8388608' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_wmem=4096 256000 8388608' >> /etc/sysctl.conf
       echo 'net.ipv4.tcp_challenge_ack_limit = 999999999' >> /etc/sysctl.conf
       sysctl -p /etc/sysctl.conf
    fi
    ;;

  init-postfix)
    # Setup postfix with origin domain name
    if [ "$(grep -s '#Bkjs' /etc/postfix/main.cf)" = "" ]; then
       yum -y -q remove sendmail
       yum -y -q install postfix
       echo "Configuring postfix..."
       echo '#Bkjs' > /tmp/main.cf
       echo 'myorigin = $mydomain' >> /tmp/main.cf
       egrep -v '^(#Bkjs|myorigin)' /etc/postfix/main.cf >> /tmp/main.cf
       mv /tmp/main.cf /etc/postfix
       chkconfig postfix on
       postfix start
    fi
    ;;

  init-dns)
    # DNS cache
    if [ "$(grep -s '#Bkjs' /etc/dnsmasq.conf)" = "" ]; then
       yum -y -q install dnsmasq
       echo "#Bkjs" > /etc/dnsmasq.conf
       echo "domain-needed" >> /etc/dnsmasq.conf
       echo "bogus-priv" >> /etc/dnsmasq.conf
       echo "no-resolv" >> /etc/dnsmasq.conf
       echo "no-poll" >> /etc/dnsmasq.conf
       grep nameserver /etc/resolv.conf |grep -v 127|sed 's/nameserver /server=/' >> /etc/dnsmasq.conf
       echo "server=8.8.8.8" >> /etc/dnsmasq.conf
       echo "server=8.8.4.4" >> /etc/dnsmasq.conf
       echo "listen-address=127.0.0.1" >> /etc/dnsmasq.conf
       echo "no-dhcp-interface=" >> /etc/dnsmasq.conf
       echo "nameserver 127.0.0.1" > /etc/resolv.conf
       echo "search $BKJS_DNS" >> /etc/resolv.conf
       chkconfig dnsmasq on
       service dnsmasq restart
    fi
    ;;

  init-instancejob)
    # Instance mode, duplicate messages to the console for easier access
    echo '*.info /dev/console' > /etc/rsyslog.d/console.conf
    truncate -c -s 0 /var/log/messages $BKJS_HOME/log/message.log $BKJS_HOME/log/error.log
    service rsyslog restart
    # Support for shutdown as normal user for instances
    chmod u+s /sbin/reboot
    # Make sure instances are not running indefinitely
    cron=$(get_arg -cron "*/30 * * * *")
    echo 'MAILTO=""' > /etc/cron.d/$BKJS-check
    echo "$cron root $BKJS_BIN run-check" >> /etc/cron.d/$BKJS-check
    ;;

  init-service)
    # Install service for a script or bkjs service
    [ "$BKJS_PATH" = "" ] && BKJS_PATH=$BKJS_BIN
    SERVICE=$(basename $BKJS_PATH | awk -F. '{print $1}')
    echo "Init service $SERVICE with $BKJS_PATH"
    ln -sf $BKJS_PATH /etc/init.d/$SERVICE
    chkconfig $SERVICE on
    server=$(get_arg -server)
    if [ "$server" != "" ]; then
       echo "BKJS_SERVER=$server" > /tmp/profile
       grep -vs BKJS_SERVER $BKJS_HOME/etc/profile >> /tmp/profile
       mv /tmp/profile $BKJS_HOME/etc
       chown $BKJS_USER $BKJS_HOME/etc/profile
    fi
    # Execute a command if given
    cmd=$(get_arg -cmd)
    [ "$cmd" != "" ] && service $SERVICE $cmd
    ;;

  stop-service)
    [ "$BKJS_PATH" = "" ] && BKJS_PATH=$BKJS_BIN
    SERVICE=$(basename $BKJS_PATH | awk -F. '{print $1}')
    echo "Stopping service $SERVICE with $BKJS_PATH"
    chkconfig $SERVICE off
    if [ -f /etc/monit.d/$SERVICE.conf ]; then
       rm /etc/monit.d/$SERVICE.conf
       monit reload
    fi
    $0 stop
    ;;

  init-mfa)
    [ "$(whoami)" != "root" ] && echo "Run as root please" && exit 1
    yum install google-authenticator –y
    if [ "$(egrep -s 'pam_google_authenticator' /etc/pam.d/sshd)" = "" ]; then
       sed -i -r 's|^auth[ \t]+substack[ \t]+password-auth|auth required pam_google_authenticator.so\n#auth substack password-auth|' /etc/pam.d/sshd
    fi
    if [ "$(egrep -s 'pam_google_authenticator' /etc/pam.d/system-auth)" = "" ]; then
       sed -i -r 's|^auth[ \t]+sufficient[ \t]+pam_unix.so nullok try_first_pass|auth requisite pam_unix.so nullok try_first_pass\nauth sufficient pam_google_authenticator.so|' /etc/pam.d/system-auth
    fi
    if [ "$(egrep -s '^ChallengeResponseAuthentication yes' /etc/ssh/sshd_config)" = "" ]; then
       echo 'ChallengeResponseAuthentication yes' >> /etc/ssh/sshd_config
    fi
    if [ "$(egrep -s '^AuthenticationMethods publickey,keyboard-interactive' /etc/ssh/sshd_config)" = "" ]; then
       echo 'AuthenticationMethods publickey,keyboard-interactive' >> /etc/ssh/sshd_config
    fi
    su $(get_arg -user ec2-user) -c "google-authenticator -d -t -f -r 2 -m 30"
    ;;

  init-monit-system)
    $ECHO "set daemon 30 with start delay 60" > /etc/monit.d/system.conf
    $ECHO "check system localhost if loadavg(1min) > 5 for 10 cycles then exec \"$0 send-alert\"" >> /etc/monit.d/system.conf
    $ECHO "check filesystem rootfs with path / if space usage > 90% for 3 times within 5 cycles then exec exec \"$0 send-alert\"" >> /etc/monit.d/system.conf
    monit reload
    ;;

  init-monit-bkjs)
    $ECHO "check process $BKJS with pidfile \"$BKJS_HOME/var/master.pid\" start program = \"$0 start $@\" as uid $BKJS_USER and gid $BKJS_GROUP with timeout 60 seconds stop program = \"$0 stop\"" > /etc/monit.d/$BKJS.conf
    monit reload
    ;;

  init-logwatcher)
    cron=$(get_arg -cron '*/30 * * * *')
    echo 'MAILTO=""' > /etc/cron.d/$BKJS-logwatcher
    echo "$cron $BKJS_USER $BKJS_BIN run-logwatcher" >> /etc/cron.d/$BKJS-logwatcher
    ;;

  init-backup)
    cron=$(get_arg -cron '30 3 * * *')
    echo 'MAILTO=""' > /etc/cron.d/$BKJS-backup
    echo "$cron root $BKJS_BIN run-backup" >> /etc/cron.d/$BKJS-backup
    ;;

  init-sync)
    cron=$(get_arg -cron '*/15 * * * *')
    echo 'MAILTO=""' > /etc/cron.d/$BKJS-sync
    echo "$cron $BKJS_USER $BKJS_BIN run-sync" >> /etc/cron.d/$BKJS-sync
    ;;

  init-packages)
    # Install required runtime packages
    packages="ntp rsync wget socat mc nano man telnet daemonize monit redis"

    yum -y -q update

    # Linux distro specific actions
    case "$OS_TYPE" in
      centos)
         rpm -i http://mirror.pnl.gov/epel/6/x86_64/epel-release-6-8.noarch.rpm
         if [ ! -f /etc/yum.repos.d/pgdg-93-centos.repo ]; then
            echo "Setting up PostgreSQL repo..."
            rpm -i http://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/pgdg-centos93-9.3-1.noarch.rpm
         fi
         packages="$packages postgresql93-server"
         ;;

      amazon)
         yum-config-manager --enable epel
         packages="$packages postgresql9-server nodejs-devel npm"
         ;;
    esac
    sleep 10
    yum -y -q install $packages

    # Daemon superviser with respawn ability
    if [ "$(which daemon 2>/dev/null)" == "" ]; then
       rpm -i http://libslack.org/daemon/download/daemon-0.6.4-1.x86_64.rpm
    fi
    ;;

  init-devel)
    # Install development packages for compiling node and modules
    packages="git svn gdb gcc-c++ make cmake autoconf automake libtool"
    packages="$packages libuuid-devel openssl-devel libxml2-devel openldap-devel readline-devel libpng-devel libjpeg-turbo-devel mysql-devel"

    # Linux distro specific actions
    case "$OS_TYPE" in
      centos)
         packages="$packages postgresql93-devel"
         ;;

      amazon)
         packages="$packages postgresql9-devel"
         ;;
    esac
    yum -y -q install $packages
    ;;

  init-alerts)
    get_config user -alert-user
    get_config host -alert-host
    get_config password -alert-password
    get_config email -alert-email
    get_config topic -alert-topic
    if [ "$email" != "" ]; then
       echo "Init monit alert: $email, $host, $user"
       $ECHO "set alert $email" > /etc/monit.d/alert.conf
       $ECHO "set mail-format { from: $email }" >> /etc/monit.d/alert.conf
       [ "$user" != "" ] && user="username $user"
       [ "$password" != "" ] && password="password $password"
       [ "$host" != "" ] && $ECHO "set mailserver localhost, $host $user $password using hostname $(uname -n)" >> /etc/monit.d/alert.conf
       monit reload
    fi
    if [ "$topic" != "" ]; then
       [ "$(grep -s $topic $BKJS_HOME/etc/config.local)" = "" ] && echo "aws-alert-topic=$topic" >> $BKJS_HOME/etc/config.local
    fi
    ;;

  init-sendmail-ses)
    get_config user -user
    get_config host -host
    get_config password -password
    [ "$user" = "" -o "$password" = "" -o "$host" = "" ] && echo "-host,-user,-password must be provided" && exit
    yum -y install sendmail-cf
    echo "AuthInfo:$host \"U:root\" \"I:$user\" \"P:$password\" \"M:LOGIN\"" > /etc/mail/authinfo
    if [[ $host =~ us-east ]]; then
       echo "AuthInfo:ses-smtp-prod-335357831.us-east-1.elb.amazonaws.com \"U:root\" \"I:$user\" \"P:$password\" \"M:LOGIN\"" >> /etc/mail/authinfo
    fi
    if [[ $host =~ us-west ]]; then
       echo "AuthInfo:ses-smtp-us-west-2-prod-14896026.us-west-2.elb.amazonaws.com \"U:root\" \"I:$user\" \"P:$password\" \"M:LOGIN\"" >> /etc/mail/authinfo
    fi
    makemap hash /etc/mail/authinfo.db < /etc/mail/authinfo
    if [ "$(grep -s "$host" /etc/mail/access)" = "" ]; then
       echo "Connect:$host RELAY" >> /etc/mail/access
       makemap hash /etc/mail/access.db < /etc/mail/access
    fi
    if [ "$(grep -s "ses-smtp" /etc/mail/access)" = "" ]; then
       if [[ $host =~ us-east ]]; then
          echo "Connect:ses-smtp-prod-335357831.us-east-1.elb.amazonaws.com RELAY" >> /etc/mail/access
       fi
       if [[ $host =~ us-west ]]; then
          echo "Connect:ses-smtp-us-west-2-prod-14896026.us-west-2.elb.amazonaws.com RELAY" >> /etc/mail/access
       fi
       makemap hash /etc/mail/access.db < /etc/mail/access
    fi
    file=/etc/mail/relay.mc
    egrep -v '^MAILER' /etc/mail/sendmail.mc > $file
    echo "define(\`SMART_HOST', \`$host')dnl" >> $file
    echo "define(\`RELAY_MAILER_ARGS', \`TCP \$h 587')dnl" >> $file
    echo "define(\`confAUTH_MECHANISMS', \`LOGIN PLAIN')dnl" >> $file
    echo "FEATURE(\`authinfo', \`hash -o /etc/mail/authinfo.db')dnl" >> $file
    get_config domain -domain
    if [ "$domain" != "" ]; then
       echo "MASQUERADE_AS(\`$domain')dnl" >> $file
       echo "FEATURE(masquerade_envelope)dnl" >> $file
       echo "FEATURE(masquerade_entire_domain)dnl" >> $file
    fi
    egrep '^MAILER' /etc/mail/sendmail.mc >> $file
    m4 $file > /etc/mail/sendmail.cf
    service sendmail restart
    ;;

  init-sendmail-ses-relay)
    off=$(get_flag -off)
    if [ "$off" != "" ]; then
       if [ "$(egrep -s -E "^DSemail-smtp" /etc/mail/sendmail.cf)" != "" ]; then
          sed -i 's/^DSemail-smtp/#DSemail-smtp/' /etc/mail/sendmail.cf
          service sendmail restart
       fi
    else
       if [ "$(egrep -s -E "^DSemail-smtp" /etc/mail/sendmail.cf)" = "" ]; then
          sed -r -i 's/^#+DSemail-smtp/DSemail-smtp/' /etc/mail/sendmail.cf
          service sendmail restart
       fi
    fi
    ;;

  send-alert)
    event=$(get_arg -event $MONIT_EVENT)
    descr=$(get_arg -descr $MONIT_DESCRIPTION)
    [ "$event" = "" -a "$descr" = "" ] && exit
    host=${MONIT_HOST:-$(uname -n)}
    ip=$(ifconfig eth0|grep 'inet '|sed 's/addr://'|awk '{print $2}')
    msg=$($ECHO "ALERT: $host/$ip $event\n\n$descr\n\n$(df -h)\n\n$(top -bn1)")
    echo "$msg" >> $BKJS_HOME/log/error.log
    topic=$(grep aws-alert-topic $BKJS_HOME/etc/config*|head -1|awk -F= '{print $2}')
    if [ "$topic" != "" ]; then
       region=$(get_arg -region)
       [ "$region" != "" ] && region="--region $region"
       aws sns publish $region --topic-arn $topic --message "$msg"
       [ "$?" = "0" ] && exit
    fi
    email=$(grep 'set alert' /etc/monit.d/*|tail -1|awk '{print $NF}')
    if [ "$email" != "" ]; then
       $ECHO "From:$email\nTo:$email\nSubject: $msg" |sendmail $email
    fi
    ;;

  run|run-master|run-monitor|run-watcher|run-shell|bkjs|bksh)
    [ -f /usr/lib/node_modules/$BKJS_MOD/lib/app.js ] && SCRIPT=/usr/lib/node_modules/$BKJS_MOD/lib/app.js
    [ -f $NODE_PATH/$BKJS_MOD/lib/app.js ] && SCRIPT=$NODE_PATH/$BKJS_MOD/lib/app.js
    [ -f $BKJS_PREFIX/lib/node_modules/$BKJS_MOD/lib/app.js ] && SCRIPT=$BKJS_PREFIX/lib/node_modules/$BKJS_MOD/lib/app.js
    [ -f $BKJS_HOME/node_modules/$BKJS_MOD/lib/app.js ] && SCRIPT=$BKJS_HOME/node_modules/$BKJS_MOD/lib/app.js
    [ -f node_modules/$BKJS_MOD/lib/app.js ] && SCRIPT=node_modules/$BKJS_MOD/lib/app.js
    [ -f lib/app.js ] && SCRIPT=lib/app.js
    [ -f $BKJS_HOME/app.js ] && SCRIPT=$BKJS_HOME/app.js
    [ -f app.js ] && SCRIPT=app.js
    [ -z $SCRIPT ] && echo "ERROR: Cannot find $BKJS module or app.js" && exit 1

    case "$ARG" in
     run-master)
        $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME -syslog -daemon -master $BKJS_ARGS "$@"
        ;;

     run-monitor)
        $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME -syslog -daemon -monitor -master $BKJS_ARGS "$@"
        ;;

     run-watcher)
        $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME -master -watch `pwd` "$@"
        ;;

     run-shell|bksh)
        $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME -shell "$@"
        ;;

     *)
        $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME "$@"
        ;;
    esac
    ;;

  run-setup)
    [ "$(whoami)" != "root" ] && echo "Not root, skipping setup" && exit 1
    # Setup domain from the config, keep the hostname as it is, for EC2 instances it is the IP address
    [ "$BKJS_DOMAIN" != "" ] && $0 init-hostname -domain $BKJS_DOMAIN
    [ "$OS_TYPE" = "amazon" ] && aws configure set region $(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone/|sed 's/[a-z]$//')
    $0 init-alerts
    $0 run-sync
    ;;

  run-sync)
    # Sync code from the master, only inside backend home, must be explicitely configured
    [ "$BKJS_SYNC" = "" ] && exit
    cd $BKJS_HOME
    info=$($0 run-shell -log none -show-info)
    mode=$(get_value "$info" mode)
    name=$(get_value "$info" name)
    version=$(get_value "$info" version)
    network=$(get_value "$info" network)
    major=$(get_value "$info" major)
    minor=$(get_value "$info" minor)
    tag=$(echo $(get_value "$info" tag)|awk -F- '{print $1}')
    dirs=$BKJS_SYNC/$mode/$name
    dirs="$dirs $BKJS_SYNC/$mode/$name/$major.$minor/"
    [ "$network" != "" ] && dirs="$dirs $BKJS_SYNC/$mode/$name/$network/"
    [ "$tag" != "" -a "$tag" != "$name" ] && dirs="$dirs $BKJS_SYNC/$mode/$name/$tag/"
    [ "$BKJS_DRY_RUN" != "" ] && $ECHO "INFO:\n$info\nDIRS:\n$dirs" && exit
    if [[ $BKJS_SYNC =~ ^s3:// ]]; then
       region=$(get_value "$info" region)
       for dir in $dirs; do echo aws s3 sync $dir $BKJS_HOME ${BKJS_DEBUG:--quiet} --recursive --region $region; done
    else
        rsync -aFF ${BKJS_DEBUG:-q} -e "ssh -l $BKJS_USER -y -o StrictHostKeyChecking=no -o ConnectTimeout=5 $BKJS_SSH_ARGS" $dirs $BKJS_HOME
    fi
    # Check for version change and run the restart command
    info2=$($0 run-shell -log none -no-db -no-dns -no-configure -show-info)
    [ "$BKJS_DEBUG" != "" ] && $ECHO "OLD:\n$info\nNEW:\n$info2"
    version2=$(get_value "$info2" version)
    major2=$(get_value "$info2" major)
    minor2=$(get_value "$info2" minor)
    [ "$version" = "$version2" ] && exit
    if [ "$major2" != "" -a "$major" != "$major2" ]; then
       npm restart
    else
       $0 restart-api
    fi
    ;;

  run-update)
    [ -f package.json ] && modules=$(node -e 'console.log(Object.keys(JSON.parse(require("fs").readFileSync("package.json")).dependencies).join(" "))' | sed "s/$BKJS_MOD//g")
    [ "$modules" != "" ] && npm install $modules $@
    ;;

  put-backend)
    # Put backend code to the remote site
    if [ "$BKJS_PATH" = "" ]; then
       mod=$(node -e 'try{console.log(JSON.parse(require("fs").readFileSync("package.json")).name)}catch(e){}')
       [ "$mod" = "$BKJS_MOD" ] && BKJS_PATH=node_modules/$BKJS_MOD
    fi
    [ "$BKJS_HOST" = "" ] && echo "Remote host required, specify with -host or BKJS_HOST" && exit
    [ -f .gitignore ] && BKJS_RSYNC_ARGS="$BKJS_RSYNC_ARGS --exclude-from .gitignore"
    [ -f $HOME/.gitignore_global ] && BKJS_RSYNC_ARGS="$BKJS_RSYNC_ARGS --exclude-from $HOME/.gitignore_global"
    [ "$BKJS_USER" != "$(whoami)" ] && BKJS_SSH_ARGS="$BKJS_SSH_ARGS -l $BKJS_USER"
    cleanup=$(get_flag -cleanup)
    key=$(get_arg -ssh-key)
    [ "$key" != "" -a -f $HOME/.ssh/$key.pem ] && BKJS_SSH_ARGS="$BKJS_SSH_ARGS -i $HOME/.ssh/$key.pem"
    files=$(get_arg -files)
    [ "$files" = "" ] && files=$(ls)
    for h in $BKJS_HOST; do
        echo "Deploying the module $mod: -e 'ssh $BKJS_SSH_ARGS' $BKJS_RSYNC_ARGS $(echo $files) $h:$BKJS_PATH"
        if [ "$BKJS_DRY_RUN" = "" ]; then
           [ "$cleanup" != "" -a "$BKJS_PATH" != "" ] && ssh $BKJS_SSH_ARGS $h rm -rf $BKJS_PATH/*
           rsync -av $BKJS_DEBUG -e "ssh $BKJS_SSH_ARGS" $BKJS_RSYNC_ARGS $files $h:$BKJS_PATH
        fi
    done
    ;;

  run-ssh)
    [ "$BKJS_HOST" = "" ] && echo "Remote host required, specify with -host or BKJS_HOST" && exit
    [ "$BKJS_USER" != "$(whoami)" ] && BKJS_SSH_ARGS="$BKJS_SSH_ARGS -l $BKJS_USER"
    cmd=$(get_arg -cmd)
    key=$(get_arg -ssh-key)
    [ "$key" != "" ] && BKJS_SSH_ARGS="$BKJS_SSH_ARGS -i $HOME/.ssh/$key.pem"
    for h in $BKJS_HOST; do
      echo "Running 'ssh $BKJS_SSH_ARGS' $h $cmd"
      if [ "$BKJS_DRY_RUN" = "" ]; then
         ssh $BKJS_SSH_ARGS $h $cmd
      fi
    done
    ;;

  run-check)
    uptime=$(</proc/uptime)
    uptime=${uptime%%.*}
    if [ $uptime -gt $BKJS_IDLETIME ]; then
       ps=$(ps agx|grep backend|grep worker|grep -v grep)
       if [ "$ps" = "" ]; then
          logger "No backend running, $uptime/$BKJS_IDLETIME, shutting down..."
          echo $ps >> /var/log/messages
          /sbin/halt
       fi
    fi
    if [ $uptime -gt $BKJS_UPTIME ]; then
       logger "Too long running, $uptime/$BKJS_UPTIME, shutting down..."
       /sbin/halt
    fi
    ;;

  run-logwatcher)
    bkjs run-shell -log error -log-watch $@
    ;;

  run-ntp)
    ntpdate pool.ntp.org > /dev/null 2>&1
    ;;

  run-backup)
    [ "$BKJS_BACKUP" = "" ] && exit
    DATE=$(date +%m-%d-%y)
    HOUR=$(date +%H)
    DOW=$(date +%w)
    DAY=$(date +%d|sed 's/^0*//g')
    FILE=backup
    # Make backup file names distinguished
    [ "$BACKUP_MOD" != "" ] && [ $(($DAY % $BACKUP_MOD)) eq 0 ] && FILE="${FILE}$BACKUP_MOD"
    [ "$BACKUP_HOURLY" != "" ] && FILE="$FILE$HOUR"
    [ "$BACKUP_DAILY" != "" ] && FILE="$FILE$DAY"
    [ "$BACKUP_WEEKLY" != "" ] && FILE="$FILE$DOW"
    FILE="$FILE-$HOST"
    # Additional options for tar
    BACKUP_TAR_ARGS="--ignore-failed-read --exclude-backup $BACKUP_TAR_ARGS"
    # File extensions to exclude from the backup
    for ext in $BACKUP_TAR_EXCLUDE; do
       BACKUP_TAR_ARGS="--exclude='*.$ext' $BACKUP_TAR_ARGS"
    done
    # Files and dirs to backup
    BACKUP_FILES="/etc /home/$BKJS_USER $BKJS_HOME/etc $BKJS_HOME/web $BKJS_PREFIX $BACKUP_FILES"
    mkdir -p $BKJS_BACKUP

    # Database backup if exists
    if [ "$BACKUP_PG" != "" -a -d $PG_DIR/base ]; then
       BACKUP_FILES="$BACKUP_FILES $PG_DIR/*.conf"
       # PG directory on CentOS is separate
       [ -e $PG_PREFIX ] && BACKUP_FILES="$BACKUP_FILES $PG_PREFIX"
       for d in $BACKUP_PG; do
         $PG_PREFIX/bin/pg_dump -Fc -U ${BACKUP_PG_USER:-postgres} $d > $BKJS_BACKUP/$FILE-$d.pgsql.dump
         [ -f $BKJS_BACKUP/$FILE-$d.pgsql.dump ] && BACKUP_ARCHIVE_FILES="$BACKUP_ARCHIVE_FILES $BKJS_BACKUP/$FILE-$d.pgsql.dump"
       done
    fi
    if [ "$BACKUP_MYSQL" != "" -a -d $MYSQL_DIR/mysql ]; then
       for d in $BACKUP_MYSQL; do
         $MYSQL_PREFIX/bin/mysqldump -u ${BACKUP_MYSQL_USER:-root} $d > $BKJS_BACKUP/$FILE-$d.mysql.dump
         [ -f $BKJS_BACKUP/$FILE-$d.mysql.dump ] && BACKUP_ARCHIVE_FILES="$BACKUP_ARCHIVE_FILES $BKJS_BACKUP/$FILE-$d.mysql.dump"
       done
    fi

    # Filesystem backup
    if [ "$BACKUP_FS" != "" ]; then
       tar $BACKUP_TAR_ARGS -czf $BKJS_BACKUP/$FILE.tar.gz $BACKUP_FILES 2>&1 |egrep -v "tar: Removing leading|tar:.+ignored|as we read it"
       [ -f $BKJS_BACKUP/$FILE.tar.gz ] && BACKUP_ARCHIVE_FILES="$BACKUP_ARCHIVE_FILES $BKJS_BACKUP/$FILE.tar.gz"
    fi
    # Allow to be managed by the user
    [ "$BACKUP_USER" != "" ] && chown -R $BACKUP_USER $BKJS_BACKUP

    # Files we just backed up
    if [ "$BACKUP_ARCHIVE_FILES" != "" ]; then

       # Send to remote host if configured, must be full ssh url with path like user@host:/path
       if [ "$BACKUP_HOST" != "" ]; then
          for h in $BACKUP_HOST; do
            su - $BKJS_USER -c "scp -q $BACKUP_ARCHIVE_FILES $h"
          done
       fi

       # Send to the S3 bucket using AWS tools
       if [ "$BACKUP_S3" != "" ]; then
          for f in $BACKUP_ARCHIVE_FILES; do
            aws s3 cp $f $BACKUP_S3/$(basename $f) --quiet
          done
       fi
    fi

    # Sync a directory with S3 bucket
    if [ "$BACKUP_S3" != "" -a "$BACKUP_S3_SYNC" != "" ]; then
       aws s3 sync $BACKUP_S3_SYNC $BACKUP_S3 --quiet
    fi
    ;;

  get-java)
    [ "$BKJS_PATH" = "" ] && echo "-path url is required" && exit 1
    url=$BKJS_PATH
    file=jdk.rpm
    rm -rf $file
    if [[ $url =~ oracle.com ]]; then
       wget -O $file --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" $url
    else
      if [[ $url =~ ^http:// ]]; then
         wget -O $file $url
      else
        if [[ $url =~ ^s3:// ]]; then
           aws s3 cp $url $file
        else
           echo "unsupported url $url" && exit 1
        fi
      fi
    fi
    [ ! -f $file ] && echo "no jdk rpm found" && exit 1
    [ "$PLATFORM" != "Linux" ] && exit
    rpm -Uvh $file
    alternatives --install /usr/bin/java java /usr/java/default/bin/java 20000
    alternatives --set java /usr/java/default/bin/java
    rm -rf $file
    ;;

  init-pgsql)
    if [ ! -f $PG_DIR/postgresql.conf ]; then
       db=$(get_arg -db backend)
       mkdir -p $PG_DIR
       [ "$OS_TYPE" = "amazon" -a -d /var/run/postgresql ] && sudo chown $BKJS_USER /var/run/postgresql
       $PG_PREFIX/bin/initdb -U postgres -D $PG_DIR
       $SED "s/#fsync = on/fsync = off/g" $PG_DIR/postgresql.conf
       $SED "s/#log_destination = 'stderr'/log_destination = 'syslog'/g" $PG_DIR/postgresql.conf
       $PG_PREFIX/bin/postgres -F -D $PG_DIR &
       sleep 3
       $PG_PREFIX/bin/createdb -U postgres $db
    fi
    ;;

  run-pgsql)
    mkdir -p $BKJS_HOME/var $BKJS_HOME/log
    exec nohup $PG_PREFIX/bin/postgres -F -D $PG_DIR >>$BKJS_HOME/log/message.log 2>&1 &
    ;;

  stop-pgsql)
    killall postgres
    ;;

  init-redis)
    ($0 get-redis)
    ($0 run-redis)
    if [ "$PLATFORM" = "Linux" ]; then
       sudo $0 init-redis-service
    fi
    ;;

  get-redis)
    # Install redis server
    case "$PLATFORM" in
     Darwin)
       OS=osx
       ;;
     Linux)
       sudo yum remove -y redis
       sudo yum install -y jemalloc
       ;;
    esac

    ver=$(get_arg -version 3.2.1)
    curl -L -o redis.tgz http://download.redis.io/releases/redis-$ver.tar.gz

    mkdir -p redis $BKJS_HOME/etc
    tar -C redis --strip-components=1 -xzf redis.tgz
    make -C redis install PREFIX=$REDIS_PREFIX
    cp redis/redis.conf $BKJS_HOME/etc
    rm -rf redis redis.tgz
    $SED -e 's|^# syslog-enabled no|syslog-enabled yes|' \
         -e "s|^dir ./|dir $BKJS_HOME/var/|" \
         -e "s|^timeout 0|timeout 3600|" \
         -e "s|^bind|# bind|" \
         -e "s|^pidfile /var/run/redis.pid|pidfile $BKJS_HOME/var/redis.pid|" \
         -e "s|^logfile \"\"|logfile $BKJS_HOME/log/redis.log|" \
         -e "s|^tcp-keepalive .+|tcp-keepalive 60|" \
         -e "s|^maxmemory-policy .+|maxmemory-policy volatile-lru|" \
         -e "s|^# maxmemory-policy .+|maxmemory-policy volatile-lru|" \
         -e 's|^daemonize no|daemonize yes|' \
         $BKJS_HOME/etc/redis.conf
    ;;

  init-redis-service)
    # There is no startup script because we rely on the monit to handle processes
    [ "$(whoami)" != "root" ] && echo "Run as root please" && exit 1
    echo 1 > /proc/sys/vm/overcommit_memory
    echo never > /sys/kernel/mm/transparent_hugepage/enabled
    if [ "$(grep -s 'overcommit_memory' /etc/sysctl.conf)" = "" ]; then
       echo 'vm.overcommit_memory=1' >> /etc/sysctl.conf
    fi
    if [ "$(grep -s 'transparent_hugepage' /etc/rc.local)" = "" ]; then
       echo 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' >> /etc/rc.local
    fi
    $ECHO "$BKJS_HOME/log/redis.log {\n  weekly\n  rotate 10\n  copytruncate\n  delaycompress\n  compress\n  notifempty\n  missingok\n}" > /etc/logrotate.d/redis
    $ECHO "check process redis-server with pidfile \"$BKJS_HOME/var/redis.pid\" start program = \"$0 run-redis $@\" as uid $BKJS_USER and gid $BKJS_GROUP stop program = \"$0 stop-redis\"" > /etc/monit.d/redis.conf
    monit reload
    ;;

  run-redis)
    # Percent from the total memory
    memsize=$(get_arg -memsize)
    [ "$memsize" != "" ] && memmax="$(( ($(free -m|grep Mem:|awk '{print $2}') * $memsize) / 100 ))mb"
    memmax=$(get_arg -memmax $memmax)
    if [ "$memmax" != "" ]; then
       sed -r -i -e "s|^maxmemory .+|maxmemory $memmax|" -e "s|^# maxmemory .+|maxmemory $memmax|" $BKJS_HOME/etc/redis.conf
    fi
    $REDIS_PREFIX/bin/redis-server $BKJS_HOME/etc/redis.conf
    ;;

  stop-redis)
    $KILLALL redis-server
    ;;

  init-sentinel-service)
    host=$(get_arg -host 127.0.0.1)
    port=$(get_arg -port 6379)
    quorum=$(get_arg -quorum 2)
    name=$(get_arg -name redis)
    dtimeout=$(get_arg -down-timeout 10000)
    ftimeout=$(get_arg -failover-timeout 180000)
    conf=$REDIS_PREFIX/etc/sentinel.conf
    $ECHO "daemonize yes" > $conf
    $ECHO "syslog-enabled yes" >> $conf
    $ECHO "sentinel monitor $name $host $port $quorum" >> $conf
    $ECHO "sentinel down-after-milliseconds $name $dtimeout" >> $conf
    $ECHO "sentinel failover-timeout $name $ftimeout" >> $conf
    $ECHO "sentinel parallel-syncs $name 1" >> $conf
    $ECHO "dir $REDIS_PREFIX/var/" >> $conf
    $ECHO "pidfile $REDIS_PREFIX/var/sentinel.pid" >> $conf
    chown $BKJS_USER $conf

    $ECHO "check process redis-sentinel with pidfile \"$REDIS_PREFIX/var/sentinel.pid\" start program = \"$0 run-sentinel $@\" as uid $BKJS_USER and gid $BKJS_GROUP stop program = \"$0 stop-sentinel\"" > /etc/monit.d/sentinel.conf
    monit reload
    ;;

  run-sentinel)
    $REDIS_PREFIX/bin/redis-sentinel $REDIS_PREFIX/etc/sentinel.conf
    ;;

  stop-sentinel)
    $KILLALL redis-sentinel
    ;;

  init-mysql)
    if [ ! -d $MYSQL_DIR/mysql ]; then
       db=$(get_arg -db backend)
       mkdir -p $MYSQL_DIR
       $ECHO "[client]\nuser=root\ndatabase=$db\nport=3306\nsocket=$MYSQL_DIR/mysql.sock\n\n" > ~/.my.cnf
       $ECHO "[mysqld]\nport=3306\nsocket=$MYSQL_DIR/mysql.sock\ndatadir=$MYSQL_DIR\nkey_buffer_size=16M\nmax_allowed_packet=500M\ngroup_concat_max_len=16000\n" >> ~/.my.cnf
       $MYSQL_PREFIX/bin/mysql_install_db --force --skip-name-resolve --datadir=$MYSQL_DIR --defaults-file=$HOME/.my.cnf
       ($0 run-mysql)
       sleep 5
       $MYSQL_PREFIX/bin/mysql -u root -e "DELETE FROM user WHERE user=''" mysql
       $MYSQL_PREFIX/bin/mysql -u root -e "DROP DATABASE test" mysql
       $MYSQL_PREFIX/bin/mysql -u root -e "CREATE DATABASE $db" mysql
    fi
    ;;

  run-mysql)
    mkdir -p $BKJS_HOME/var $BKJS_HOME/log
    [ -f $MYSQL_PREFIX/bin/mysqld ] && exec nohup $MYSQL_PREFIX/bin/mysqld >>$BKJS_HOME/log/message.log 2>&1 &
    [ -f $MYSQL_PREFIX/libexec/mysqld ] && exec nohup $MYSQL_PREFIX/libexec/mysqld >>$BKJS_HOME/log/message.log 2>&1 &
    ;;

  stop-mysql)
    killall mysqld
    ;;

  init-dynamodb)
    ($0 get-dynamodb)
    ($0 run-dynamodb)
    ;;

  get-dynamodb)
  [ "$(get_arg -force)" != "" -a "$DYNAMODB_PREFIX" != "" ] && rm -rf $DYNAMODB_PREFIX
    if [ ! -d $DYNAMODB_PREFIX ]; then
       mkdir -p $DYNAMODB_PREFIX
       curl -L -o ddb.tgz http://dynamodb-local.s3-website-us-west-2.amazonaws.com/dynamodb_local_latest.tar.gz
       tar -C $DYNAMODB_PREFIX -xzf ddb.tgz
       rm -rf ddb.tgz
    fi
    ;;

  run-dynamodb)
    mkdir -p $BKJS_HOME/var $BKJS_HOME/log
    params="-Xmx$(get_arg -xmx 512M)"
    exec nohup java $params -Djava.library.path=$DYNAMODB_PREFIX/DynamoDBLocal_lib -jar $DYNAMODB_PREFIX/DynamoDBLocal.jar -dbPath $BKJS_HOME/var -port 8181 >>$BKJS_HOME/log/message.log 2>&1 &
    ;;

  stop-dynamodb)
    kill $(ps agx|grep DynamoDBLocal|grep -v grep|awk '{print $1}')
    ;;

  get-cassandra)
    [ "$(get_arg -force)" != "" -a "$CASSANDRA_PREFIX" != "" ] && rm -rf $CASSANDRA_PREFIX
    if [ ! -d $CASSANDRA_PREFIX ]; then
        mkdir -p $CASSANDRA_PREFIX $CASSANDRA_DIR
        curl -OL http://downloads.datastax.com/community/dsc.tar.gz
        tar -C $CASSANDRA_PREFIX --strip-components=1 -xzf dsc.tar.gz
        rm -rf dsc.tar.gz
        $SED "s|-Dcassandra.logdir=\$CASSANDRA_HOME/logs|-Dcassandra.logdir=$BKJS_HOME/log|g" $CASSANDRA_PREFIX/bin/cassandra
        $SED "s|/var/lib/cassandra/|$CASSANDRA_DIR/|g" $CASSANDRA_PREFIX/conf/*.{yaml,properties,sh}
        $SED "s|/var/log/cassandra/|$BKJS_HOME/log/|g" $CASSANDRA_PREFIX/conf/*.{yaml,properties,sh}
        $SED "s|# commitlog_directory:|commitlog_directory:|" $CASSANDRA_PREFIX/conf/cassandra.yaml
        $SED "s|# saved_caches_directory:|saved_caches_directory:|" $CASSANDRA_PREFIX/conf/cassandra.yaml
        $SED "s|# data_file_directories:|data_file_directories:|" $CASSANDRA_PREFIX/conf/cassandra.yaml
        $SED "s|#     - $CASSANDRA_DIR|    - $CASSANDRA_DIR|" $CASSANDRA_PREFIX/conf/cassandra.yaml
        chown -R $BKJS_USER $CASSANDRA_DIR $CASSANDRA_PREFIX
    fi
    ;;

  init-cassandra)
    ($0 get-cassandra)
    ($0 run-cassandra)
    sleep 15
    db=$(get_arg -db backend)
    echo "CREATE KEYSPACE $db WITH REPLICATION = {'class': 'SimpleStrategy' , 'replication_factor': 1 };" > /tmp/cql
    $CASSANDRA_PREFIX/bin/cqlsh -f /tmp/cql
    ;;

  run-cassandra)
    mkdir -p $BKJS_HOME/var $BKJS_HOME/log
    $CASSANDRA_PREFIX/bin/cassandra >>$BKJS_HOME/log/message.log 2>&1
    ;;

  stop-cassandra)
    kill $(ps agx|grep cassandra|grep -v grep|awk '{print $1}')
    ;;

  get-elasticsearch)
  [ "$(get_arg -force)" != "" -a "$ELASTICSEARCH_PREFIX" != "" ] && rm -rf $ELASTICSEARCH_PREFIX
    if [ ! -d $ELASTICSEARCH_PREFIX ]; then
        mkdir -p $ELASTICSEARCH_PREFIX
        curl -L -o es.tgz https://download.elasticsearch.org/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.3.5/elasticsearch-2.3.5.tar.gz
        tar -C $ELASTICSEARCH_PREFIX --strip-components=1 -xzf es.tgz
        rm -rf es.tgz
        cd $ELASTICSEARCH_PREFIX
        echo "node.master: true" >> config/elasticsearch.yml
        echo "node.data: true" >> config/elasticsearch.yml
        echo "path.data: $ELASTICSEARCH_DIR" >> config/elasticsearch.yml
        echo "path.logs: $BKJS_HOME/log" >> config/elasticsearch.yml
        echo "script.inline: on" >> config/elasticsearch.yml
        echo "script.indexed: on" >> config/elasticsearch.yml
        if [ "$OS_TYPE" = "amazon" ]; then
           echo 'network.host: ["_ec2_","_local_"]' >> config/elasticsearch.yml
           echo 'discovery.type: ec2' >> config/elasticsearch.yml
           bin/plugin install cloud-aws -b
        fi
    fi
    ;;

  init-elasticsearch)
    ($0 get-elasticsearch)
    ($0 run-elasticsearch "$@")
    if [ "$PLATFORM" = "Linux" ]; then
       sudo $0 init-elasticsearch-service "$@"
    fi
    ;;

  init-elasticsearch-service)
    echo "check process java with pidfile \"$BKJS_HOME/var/elasticsearch.pid\" start program = \"$0 run-elasticsearch $@\" as uid $BKJS_USER and gid $BKJS_GROUP stop program = \"$0 stop-elasticsearch\"" > /etc/monit.d/elasticsearch.conf
    monit reload
    ;;

  run-elasticsearch)
    # Percent from the total memory
    memsize=$(get_arg -memsize)
    [ "$memsize" != "" ] && memmax="$(( ($(free -m|grep Mem:|awk '{print $2}') * $memsize) / 100 ))m"
    memmax=$(get_arg -memmax $memmax)
    if [ "$memmax" != "" ]; then
       export ES_MAX_MEM=$memmax
       $SED "s/ES_MAX_MEM=[0-9]+(g|m)?/ES_MAX_MEM=$memmax/" $ELASTICSEARCH_PREFIX/bin/elasticsearch.in.sh
    fi
    case "$(get_arg -nodetype)" in
    node)
      $SED -e "s/^node.master.+/node.master: true/" -e "s/^node.data.+/node.data: true/" $ELASTICSEARCH_PREFIX/config/elasticsearch.yml
      ;;
    master)
      $SED -e "s/^node.master.+/node.master: true/" -e "s/^node.data.+/node.data: false/" $ELASTICSEARCH_PREFIX/config/elasticsearch.yml
      ;;
    data)
      $SED -e "s/^node.master.+/node.master: false/" -e "s/^node.data.+/node.data: true/" $ELASTICSEARCH_PREFIX/config/elasticsearch.yml
      ;;
    client)
      $SED -e "s/^node.master.+/node.master: false/" -e "s/^node.data.+/node.data: false/" $ELASTICSEARCH_PREFIX/config/elasticsearch.yml
      ;;
    esac
    $ELASTICSEARCH_PREFIX/bin/elasticsearch -p $BKJS_HOME/var/elasticsearch.pid -d >>$BKJS_HOME/log/message.log 2>&1
    ;;

  stop-elasticsearch)
    kill $(ps agx|grep org.elasticsearch|grep -v grep|awk '{print $1}')
    ;;

  upgrade-elasticsearch)
    curl -XPUT localhost:9200/_cluster/settings -d '{"transient":{"cluster.routing.allocation.enable": "none"}}'
    $0 stop-elasticsearch
    $0 get-elasticsearch -force
    monit reload
    sleep $(get_arg -sleep 30)
    curl -XPUT localhost:9200/_cluster/settings -d '{"transient":{"cluster.routing.allocation.enable": "all"}}'
    ;;

  get-mongodb)
    case "$PLATFORM" in
     Darwin)
       OS=osx
       ;;
     Linux)
       OS=linux
       ;;
    esac
    if [ ! -f $BKJS_PREFIX/bin/mongod ]; then
       curl -L -o mongo.tgz http://fastdl.mongodb.org/osx/mongodb-$OS-x86_64-3.0.6.tgz
       tar -C $BKJS_PREFIX/bin --strip-components=1 -xzf mongo.tgz '*/bin/*'
       rm -rf mongo.tgz
    fi
    ;;

  init-mongodb)
    ($0 get-mongodb)
    ($0 run-mongodb)
    ;;

  run-mongodb)
    mkdir -p $MONGO_DIR $BKJS_HOME/var $BKJS_HOME/log
    $BKJS_PREFIX/bin/mongod --fork --dbpath $MONGO_DIR --syslog >>$BKJS_HOME/log/message.log 2>&1
    ;;

  stop-mongodb)
    kill $(ps agx|grep mongod|grep -v grep|awk '{print $1}')
    ;;

  show-instances)
    region=$(get_arg -region)
    [ "$region" != "" ] && region="--region $region"
    name=$(get_arg -name)
    [ "$name" != "" ] && tags="Name=tag:Name,Values=${name}"
    instances=$(aws ec2 describe-instances $region --filter "Name=instance-state-name,Values=running" $tags --query 'Reservations[*].Instances[*].[InstanceId,PrivateIpAddress,PublicIpAddress,KeyName,Tags[?Key==`Name`]]' --output text|awk '{if($4=="None")print $0;else if($1=="Name")print $2;else printf "%s ",$0;}')
    fmt=$(get_arg -fmt)
    [ "$fmt" != "" ] && instances=$(echo "$instances"|awk "{print $(echo $fmt|sed -e 's/id/\$1/' -e 's/ip/\$2/' -e 's/host/\$3/' -e 's/key/\$4/' -e 's/name/\$5/')}")
    if [ "$PLATFORM" = "Linux" -a "$(get_flag -nomyip)" != "" ]; then
       ip=$(ifconfig eth0|grep 'inet '|sed 's/addr://'|awk '{print $2}')
       instances=$(echo $instances|sed "s/$ip//")
    fi
    if [ "$(get_flag -line)" != "" ]; then
       echo "$instances" | tr '\n' ' '
    else
       echo "$instances"
    fi
    ;;

  ec2-ssh)
    name=$(get_arg -name)
    [ "$name" = "" ] && echo "-name is required" && exit 1
    user=$(get_arg -user ec2-user)
    region=$(get_arg -region)
    index=$(get_arg -index 1)
    [ "$(get_flag -ip)" != "" ] && host=ip
    instance=$($0 show-instances -region "$region" -fmt "${host:-host},key" -name "$name"|head -$index|tail -1)
    [ "$instance" = "" ] && exit 1
    host=$(echo $instance|awk '{print $1}')
    key=$(echo $instance|awk '{print $2}')
    cmd="ssh -l $user"
    [ -f "~/.ssh/$key.pem" ] && cmd="$cmd -i ~/.ssh/$key.pem"
    cmd="$cmd $host $(get_arg -cmd)"
    [ "$BKJS_DEBUG" != "" ] && echo $cmd
    eval $cmd
    ;;

  show-help)
    $NODE_BIN -e "require('$BKJS_MOD').core.showHelp()"
    ;;

  npm-deps)
    args=$(get_arg -args)
    type=$(get_arg -type dependencies)
    skip=$(get_arg -skip $BKJS_MOD)
    modules=$($NODE_BIN -e "try{skip='$skip'.split(/[ ,]/);console.log(Object.keys(JSON.parse(require('fs').readFileSync('package.json')).$type).filter(function(x){return skip.indexOf(x)==-1}).join(' '))}catch(e){}")
    echo "$modules"
    sleep 1
    for m in $modules; do $NPM_BIN $args install $m; done
    ;;

  install-bkjs)
    (cd $BKJS_HOME && npm install git+https://github.com/vseryakov/$BKJS_MOD.git $BKJS_ARGS)
    ;;

  build-bkjs)
    if [ ! -d $BKJS_MOD ]; then
        git clone https://github.com/vseryakov/$BKJS_MOD.git
    fi
    (cd $BKJS_MOD && git pull)
    (cd $BKJS_MOD && npm install $BKJS_ARGS)
    ;;

  build-node)
    if [ ! -d deps/node ]; then
       mkdir -p deps
       (cd deps && git clone -b v0.10 https://github.com/nodejs/node.git)
    fi
    (cd deps/node && [ ! -f out/Makefile ] && CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" ./configure --prefix=$BKJS_PREFIX)
    (cd deps/node && git pull && make install clean)
    $NPM_BIN config set nodedir "$(pwd)/deps/node"
    ;;

  pack-app)
    [ ! -f package.json ] && $ECHO "No package.json found" && exit
    NAME=app
    [ "$1" != "" -a "${1:0:1}" != "-" ] && NAME=$1 && shift
    npm install
    zip -r ../$NAME . -x '.*' -x 'etc/*.local'
    ;;

  init-app)
    [ -f core.js ] && $ECHO "Cannot create new app inside the backend sources, please use some other directory\n" && exit
    NAME=app
    [ "$1" != "" -a "${1:0:1}" != "-" ] && NAME=$1 && shift
    mkdir -p etc web
    if [ ! -e README.md ]; then
       cat > README.md <<EOF
# Backendjs application

1. To install

        npm install

2. Create a user

        bksh -etc-dir \$(pwd)/etc -account-add login admin secret admin

3. Run the app

        ./app.sh

4. Point browser to http://localhost:8000

5. Login as admin:admin

# Authors
$(whoami)

EOF
    fi

    [ ! -e $NAME.sh ] && $ECHO "#!/bin/bash\n\nexec node $NAME.js -watch \$(pwd) -watch \$(pwd)/modules -web -log debug -etc-dir \$(pwd)/etc -web-dir \$(pwd)/web -views-dir \$(pwd)/views -modules-dir \$(pwd)/modules \$@\n" > $NAME.sh && chmod 755 $NAME.sh
    [ ! -e .gitignore ] && $ECHO "*~\n.*\n*.local\nbin/\ndocs/\nbuild/\ndeps/\nvar/\nfiles/\nimages/\ntmp/\nlog/\nnode_modules/\n" >> .gitignore

    if [ ! -e etc/config ]; then
       cat > etc/config <<EOF
#debug=1
#port=80
#repl-port-master=2080
#repl-port-server=2081
#db-pool=pgsql
#db-mysql-pool=mysql:///backend
#db-cassandra-pool=cql://127.0.0.1/backend
#db-pgsql-pool=postgresql://postgres@127.0.0.1/backend
#db-dynamodb-pool=http://localhost:8181
#db-dynamodb-pool=us-east-1
#db-mongodb=mongodb://localhost
#api-images-s3=S3BucketName
#server-max-processes=1
#logwatcher-interval=3600
#logwatcher-email=logwatcher@dot.com
#api-allow-path=^/open/url$
#api-allow-admin=^/(system|data)
#ipc-cache=redis://10.1.1.1
EOF
    fi

    if [ ! -e $NAME.js ]; then
      cat > $NAME.js <<EOF
//
// Backend app
// Created by $(whoami) on $(date)
//
var bkjs = require('$BKJS_MOD');
var db = bkjs.db;
var api = bkjs.api;
var app = bkjs.app;
var core = bkjs.core;
var lib = bkjs.lib;
var logger = bkjs.logger;

db.describeTables({
    // New table
    test: {
        id: { primary: 1 },
        name: {},
        mtime: { type: "now" },
    },
    // Extend accounts table
    bk_account: {
        status: { value: "active" },
    },
    // Extend locations table, keep account status for filtering
    bk_location: {
        status: { pub: 1 },
    },
    // Add out custom counters updated on connections of type 'test'
    bk_counter: {
        test0: { type: "counter", value: 0, pub: 1, autoincr: 1 },
        test1: { type: "counter", value: 0 },
    },
});

// Create API endpoints and routes
app.configureWeb = function(options, callback)
{
    db.setProcessRow("post", 'test', this.processTestRow);

    // Add new record
    api.app.all(/^\/test\/add/, function(req, res) {
        db.add('test', { id: req.query.id, name: req.query.name }, function(err, rows) {
            api.sendReply(res, err);
        });
    });
    // Update record
    api.app.all(/^\/test\/update/, function(req, res) {
        if (!req.query.id || !req.query.name) return api.sendRepy(res, { status: 400, message: "id and name required" });

        db.update('test', req.query, function(err, rows) {
            api.sendReply(res, err);
        });
    });
    // Retrieve record by id
    api.app.all(/^\/test\/([0-9]+)/, function(req, res) {
        var options = api.getOptions(req);
        db.get('test', { id: req.params[0] }, options, function(err, rows) {
            api.sendJSON(req, err, rows);
        });
    });
    callback()
};

// A job method that can be called directly from the crontab or via shell
app.processTestJob = function(options, callback)
{
    db.select("test", {}, function(err, rows) {
        if (err) return callback(err);
        console.log("Test contains: ", rows.length, "records")
        callback()
    });
}

// Modify every row returned to the client, we can add/del properties
app.processTestRow = function(req, row, options)
{
    row.url = '/test/list';
    return row;
}

api.registerPostProcess('', /^\/account\/([a-z\/]+)$/, function(req, res, rows) {
    var self = this;
    switch (req.params[0]) {
    case 'add':
       // Perform our own additional work for new accounts, req.account contains new account record
       db.add('test', { id: req.account.id });
       break;
    case 'del':
       db.del('test', { id: req.account.id });
       break;
    }
});

// Redirect on unauthorized access to the files
api.registerPreProcess('', /^\/test\/list$/, function(req, status, callback) {
    if (status.status != 200) {
        status.status = 302;
        status.url = '/public/index.html';
    }
    callback(status);
});

bkjs.server.start();
EOF
      $ECHO "{\n \"version\": \"0.1.0\",\n \"author\": \"$(whoami)\",\n \"name\": \"app\",\n \"description\": \"The app\",\n \"main\": \"app.js\",\n \"dependencies\": {\n    \"$BKJS_MOD\": \">=0.10.0\"\n },\n \"engines\": { \"node\": \">= 0.10\" },\n \"scripts\": { \"start\": \"node app.js\" },\n \"license\": \"BSD-3-Clause\" }" > package.json
    fi
    ;;

  run-app)
    NAME=app
    [ "$1" != "" -a "${1:0:1}" != "-" ] && NAME=$1 && shift
    $NODE_BIN $NAME.js -log debug -watch `pwd` -web $@
    ;;

  show-env)
    set
    ;;

  *)
    [ "$ARG" != "" ] && echo "error: unknown command: $ARG: $@" >&2
    echo ""
    echo "usage: $BK command ..."
    echo "  where command is:"
    echo ""
    echo "  start - start the backend service"
    echo "  restart - restart the backend service"
    echo "  restart-api - graceful API servers restart, drain all connections and restart one at a time"
    echo "  stop - stop the backend service"
    echo "  stop-web - kill Web worker processes so they will restart with possibly new node modules synced from the master host"
    echo "  install - [-user USER] [-home HOME] [-prefix $PREFIX] [-doman DOMAIN] [-host HOST] - make server setup and install all pakages including node and the $BKJS_MOD"
    echo "  init-server [-user USER] [-home HOME] [-prefix $PREFIX] [-doman DOMAIN] [-host HOST] - initialize the backend environment, setup the Linux server with packages and change system config files for production use (Amazon AMI, CentOS)"
    echo "  init-hostname [-host HOST] [-domain DOMAIN] - set the hostname"
    echo "  check-hostname - if needed update /etc/hosts with the hostname of eth0 interface IP address"
    echo "  init-user [-user NAME] - create a new user for the backend"
    echo "  init-ssh - setup SSH permissions, allow only public key auth"
    echo "  init-logrotate - setup logrotate for the backend log files"
    echo "  init-rsyslog - setup rsyslog to use for the backend logging, access log and backend log"
    echo "  init-system - setup system wide parameters, tuniing, limits, permissions"
    echo "  init-monit-system - setup system monitoring with monit, CPU, disk, send alert via '$0 send-alert' command"
    echo "  init-monit-bkjs - setup monit to keep $BKJS service running without using any other services and monitor"
    echo "  init-alerts - init alerts in the monit and other systems, use DB config for the specified app name"
    echo "  init-postfix - [-domain DOMAIN] install and configure postfix for the domain"
    echo "  init-sendmail - [-domain DOMAIN] -host HOST -user USER -password PW - configure sendmail as relay to SES SMTP"
    echo "  init-dns - install and setup dnsmasq for local cahching DNS server"
    echo "  init-instancejob - configure a checker for temporary job instance"
    echo "  init-service [-server NAME] - create bkjs service to be run on server startup, i.e. makes symlink /etc/init.d/$BKJS after which regular 'service' command can be used to manage the $BKJS service"
    echo "  init-sync - setup a cron job to run run-sync command every 5 minites to check for new software on the \$BKJS_SYNC server"
    echo "  init-packages - install required packges and updates"
    echo "  init-devel - install development packages for node and modules compiclation"
    echo "  init-home - setup backend home with required folders"
    echo "  init-mfa [-user ec2-user] - initialize EC2 instance with multi-factor authentication using Google authenticator"
    echo "  init-logwatcher - creates a crontab file in /etc/cron.d to periodically run the log watcher, -cron can specify full cron time spec"
    echo "  init-app - create application skeleton for an application based on the backend, app name can be specified as the first argument"
    echo "  send-alert [-event EVENT] [-descr DESCR] - send alert message to the error log and SNS topic if configured in \$BKJS_SNS variable, if called from monit event/descr will be provided"
    echo "  run-logwatcher - executes the log watcher"
    echo "  run-setup - it is run just before the server to set the domain, sync and other tasks"
    echo "  run-server - run the backend server process, this command is supposed to be run on system startup by start command"
    echo "  run-shell - run backend REPL in the current backend directory, works with the backend core or local app.js application"
    echo "  run-backend - run local backend server or the app.js if present, all command line params will be passed to the backend.js"
    echo "  put-backend [-host HOST] [-path PATH] [-user USER] [-ssh-key pem] [-ssh OPTS] [-exclude PATTERN] [-delete] - push the backend code to the master server, uses env BKJS_HOST or host parameter from the command line, replaces all files and removes non-existing on the dest except in web/ directory, default path is ~/node_modules/$BKJS_MOD"
    echo "  run-sync - synchronize other directories from the master host, runs on the start, must use BKJS_SYNC in the profile set to the host name where to get files"
    echo "  run-update [-g] - update all dependencies except the backend module from the package.json"
    echo "  run-check - to be run on instances, check for idleness,if no jobs running then shutdown the host"
    echo "  init-backup - creates a crontab file in /etc/cron.d to periodically run the backup, -args can be used to specify the full cron time spec"
    echo "  run-backup - run the backup script, store in \$BKJS_BACKUP, can be used in crontabs with symlink"
    echo "  init-pgsql [-db NAME] - setup and run the PostgreSQL server, install in $PG_PREFIX, data files in $PG_DIR, create initial database"
    echo "  run-pgsql - run local PostgreSQL server"
    echo "  stop-pgsql - stop local PostgreSQL server"
    echo "  get-redis - install Redis server into $REDIS_PREFIX, removes current redis package if installed (Linux only)"
    echo "  init-redis - install and setup Redis server to be run on start and to be monitored (Linux only)"
    echo "  init-redis-service [-memsize PERCENT] [-memmax SIZE] - setup Redis server to be run on start and to be monitored (Linux only)"
    echo "  run-redis [-memsize PERCENT] [-memmax SIZE] - run local Redis server, uses config file $REDIS_CONF"
    echo "  stop-redis - stop local Redis server"
    echo "  init-sentinel-service [-host HOST] [-port PORT] - setup Redis Sentinel server to be run on start and to be monitored (Linux only)"
    echo "  run-sentinel - run local Redis Sentinel server, uses config file $REDIS_PREFIX/sentinel.conf"
    echo "  stop-sentinel - stop local Redis Sentinel server"
    echo "  init-dynamodb - download and install local DynamoDB, start the server"
    echo "  get-dynamodb - install local DynamoDB server in $BKJS_PREFIX/dynamodb"
    echo "  run-dynamodb - run local DynamoDB server installed in $BKJS_PREFIX/dynamodb, data files in $BKJS_HOME/var"
    echo "  stop-dynamodb - stop local DynamoDB server"
    echo "  get-cassandra - download and install Cassandra server in $CASSANDRA_PREFIX"
    echo "  init-cassandra [-db DB] - download and initialize Cassandra, create initial keyspace, run the server"
    echo "  run-cassandra - run local Cassandra server installed in $CASSANDRA_PREFIX, data files in $CASSANDRA_DIR"
    echo "  stop-cassandra - stop local Cassandra server"
    echo "  get-elasticsearch - install local ElasticSearch server in $BKJS_PREFIX/elasticsearch"
    echo "  init-elasticsearch - download and install local ElasticSearch, start the server, configure monit"
    echo "  init-elasticsearch-service [-memsize PERCENT] [-memmax SIZE] [-nodetype TYPE] - setup monit to keep elasticsearch service running"
    echo "  run-elasticsearch [-memsize PERCENT] [-memmax SIZE] [-nodetype TYPE] - run local ElasticSearch server installed in $BKJS_PREFIX/elasticsearch, -memmax is max heap size, -memsize is the percent of the total memory to use, -nodetype can be node,master,data,client"
    echo "  stop-elasticsearch - stop local ElasticSearch server"
    echo "  upgrade-elasticsearch - update with a new version and restart"
    echo "  init-mysql [-db DB] - setup MySQL server for development and create initial database, start the server"
    echo "  run-mysql - run local MySQL server installed in $MYSQL_DIR"
    echo "  stop-mysql - stop local MySQL server"
    echo "  init-mongodb - download and start the Mongo server"
    echo "  get-mongodb - download Mongo server and install in $BKJS_PREFIX/bin"
    echo "  run-mongodb - run local Mongo server installed in $BKJS_PREFIX/bin, db path is $MONGO_DIR"
    echo "  stop-mongodb - stop local Mongo server"
    echo "  npm-deps - install all npm packages from the dependencies list"
    echo "  install-bkjs - install the $BKJS_MOD from the github using npm, build dependencies are passed in -args"
    echo "  build-bkjs - clone and build the $BKJS_MOD from the git in the current dir with dependencies specified in -args"
    echo "  build-node - build node and install in $BKJS_PREFIX or in [-prefix PATH], on Linux init-devel should be called before this command to install devel packages"
    echo "  show-instances [-region region] [-name name] [-fmt fmt]- show running instances in region, optional tag pattern can be used for filter, FMT may contain: id,ip,host,key,name which will be replaced with actual values"
    echo "  ec2-ssh -name name [-region region] [-ip] [-cmd cmd] - login using ssh to a host(IP) by tag name, key name will be used to specify a keypair from ~/.ssh/, -cmd if specified will be run on the remote host"
    echo "  show-help - show all backend command line and config parameters"
    echo ""
    echo "bksh commands:"
    echo "if any of the commands below is specified it is executed and then exit, otherwise bksh launches interactive shell"
    echo ""
    echo "  -show-info - show app and version information"
    echo "  -account-get ID|LOGIN ... - show accounts by id or login"
    echo "  -account-add [-scramble] login LOGIN secret SECRET [name NAME] [email EMAIL] [type TYPE] ... - add a new user for API access, any property from bk_account can be passed in the form: name value, if -scramble is given, store HMAC for login/secret, not real values "
    echo "  -account-update [-scramble] [login LOGIN|id ID] [name NAME] [email EMAIL] [type TYPE] ... - update existing user properties, any property from bk_account can be passed in the form: name value "
    echo "  -account-del [login LOGIN|id ID] [-keep message] [-keep location]... - delete a new user, 'keep TABLE' tells which records to keep the TABLE being account tables without bk_ prefix, one of auth,counter,account,location,connection,message,icon"
    echo "  -location-put [login LOGIN|id ID] latitude LAT longitude LON ... - update location for an account"
    echo "  -send-request -url URL [-id ID|-login LOGIN] param value param value ... - send API request to the server specified in the url as user specified by login or account id, resolving the user is done directly from the current db pool, param values should not be url-encoded"
    echo "  -log-watch - run logwatcher and exit, send emails in case any errors found"
    echo "  -test-run CMD [-test-file FILE] - run a test command in the shell, autoload ./tests/tests.js if exists, optinally can load other file with tests, all other test params will be used as well"
    echo "  -db-get-config [-separator =] [-format text] [-run-mode MODE] [-app-name NAME] [name VALUE ...] - show all config parameters retrieved from the remote database bk_config table for the current environment, to simulate another environment pass the following arguments as name value pairs: role, network, region, zone, tag"
    echo "  -db-tables [-separator nl] - list all table names for the current db pool"
    echo "  -db-select -table TABLE [-separator !] [-format text] [name VALUE ...] - return all records from the table or only that match given column values, all supported by db.select options are supported by prefixing with underscore like _count 10, the format is the same as for API query parameters"
    echo "  -db-scan -table TABLE [name VALUE ...] - return all records from the table using scan operation, same arg as for db-select"
    echo "  -db-get -table TABLE [name VALUE ...] - return a record from the table for given primary key"
    echo "  -db-put -table TABLE name VALUE ... - add or replace a record in the config table, name value pairs are column name and value to be set for the record to be added"
    echo "  -db-del -table TABLE name VALUE ... - delete a record from the table, name value pairs must define a primary key for the table"
    echo "  -db-del-all -table TABLE name VALUE ... - delete all records from the table that match the search criteria, name value pairs must define a primary key for the table"
    echo "  -db-drop -table TABLE name [-nowait] - drop a table"
    echo "  -db-backup [-path PATH] [-tables LIST] [-skip LIST] - save tables into json files in the home or specified path"
    echo "  -db-restore [-path PATH] [-tables LIST] [-skip LIST] [-mapping ID1,ID2...] [-drop] [-continue] - restore tables from json files located in the home or specified path"
    echo "  -aws-s3-get -path PATH - retrieve a file from S3"
    echo "  -aws-s3-put -path PATH -file FILE - store a file to S3"
    echo "  -aws-show-amazon-images [-filter PATTERN] [-arch ARCH] [-rootdev ebs|instance-store|*] [-devtype gp2|io1|standard|*] - show Amazon Linux AMIs (use %2A instead of *)"
    echo "  -aws-show-images [-filter PATTERN] - show my account AMIs by name pattern"
    echo "  -aws-delete-image -filter PATTERN [-dry-run] - delete all AMIs that match the given name filter"
    echo "  -aws-create-image [-name NAME] [-descr DESCR] [-no-reboot] [-reboot] [-instance-id ID] [-dry-run] - create a new AMI from the instance by id or the current instance"
    echo "  -aws-launch-instances [-count NUM] [-image-name PATTERN] [-name NAME] [-group-name PATTERN] [-subnet-name PATTERN] [-subnet-split] [-subnet-each] [-user-data TEXT] [-alarm-name NAME] [-host-name HOST] [-bkjs-cmd NAME] [-cloudinit-cmd CMD] [-wait] [wait-timeout MSECS] [-wait-delay MSECS] [-dry-run] - start instance(s), the app name from the package.json is used as the base for all other resources unless explicitely defined in the command line"
    echo "  -aws-reboot-instances -filter PATTERN [-dry-run] - reboot instances by tag pattern"
    echo "  -aws-terminate-instances -filter PATTERN [-count NUM] [-dry-run] - terminate instances by tag pattern"
    echo "  -aws-show-instances [-filter PATTERN] [-show-ip] - show running instances by tag pattern"
    echo "  -aws-show-elb -elb-name NAME [-filter PATTERN] - show instances for an ELB"
    echo "  -aws-reboot-elb -elb-name NAME [-timeout MSECS] [-interval MSECS] [-dry-run]"
    echo "  -aws-replace-elb -elb-name NAME [-timeout MSECS] [-interval MSECS] [-dry-run]"
    echo "  -aws-setup-ssh -group-name NAME [-close] [-dry-run]"
    echo "  -aws-setup-instance [-cmd CMD] [-file FILE ] [-wait] [-dry-run]"
    echo "  -aws-create-launch-config [-name NAME] [-config-name NAME] [-instance-name NAME] [-update-groups] [-dry-run] - create a launch configuration for autoscaling, can copy from an instance or other existing config, optinally update all ASGs with new config name"
    echo "  -aws-set-route53 -name HOSTNAME [-filter PATTERN] [-type A|CNAME] [-ttl N] [-public] [-dry-run] - create or update a Route53 record of specified type with IP/hostnames of all instances that satisfy the given filter, -public makes it use public IP/hostnames"
    echo ""
    echo "Common options:"
    echo "  -root path - path to the backend home directory, default is $BKJS_HOME"
    echo "  -home path - same as -root"
    echo "  -prefix path - path to the local binaries directory, default is $BKJS_PREFIX"
    echo "  -user name - set backend user on the remote or local side, default is $BKJS_USER"
    echo "  -host host - host to be used transfer or sync, default is $BKJS_HOST"
    echo "  -path path - path to be used for transfer or sync, default is $BKJS_PATH"
    echo "  -ssh opts - pass additional parameters to the ssh command"
    echo "  -rsync opts - pass additional parameters to the rsync command"
    echo "  -args opts - generic parameters used by any specific command"
    echo "  -config params - if applicable retrieve the DB config for the given criteria, params are passed to the -db-get-config call"
    ;;
esac

